<HTML>
<HEAD>
<TITLE>Chapter 4 -- Saving Configurations with Cookies</TITLE>

<META NAME="GENERATOR" CONTENT="Internet Assistant for Microsoft Word 2.0z">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT SIZE=6 COLOR=#FF0000>Chapter&nbsp;4</FONT></H1>
<H1><FONT SIZE=6 COLOR=#FF0000>Saving Configurations with Cookies</FONT>
</H1>
<HR>
<P>
<CENTER><B><FONT SIZE=5><A NAME="CONTENTS">CONTENTS</A></FONT></B></CENTER>
<UL>
<LI><A HREF="#WhatAreCookies">
What Are Cookies?</A>
<UL>
<LI><A HREF="#CookiesandSecurity">
Cookies and Security</A>
<LI><A HREF="#WhoCanCook">
Who Can Cook?</A>
</UL>
<LI><A HREF="#CookieSpecifics">
Cookie Specifics</A>
<LI><A HREF="#GeneratingCookies">
Generating Cookies</A>
<UL>
<LI><A HREF="#TheISetCookieIHeader">
The <I>Set-Cookie</I> Header</A>
<LI><A HREF="#TheHTMLIltMETAgtItag">
The HTML <I>&lt;META&gt;</I> tag</A>
<LI><A HREF="#RetrievingCookieData">
Retrieving Cookie Data</A>
<LI><A HREF="#BrowserTesting">
Browser Testing</A>
</UL>
<LI><A HREF="#UsingJavaScriptCookies">
Using JavaScript Cookies</A>
<UL>
<LI><A HREF="#CreatingJavaScriptCookies">
Creating JavaScript Cookies</A>
<LI><A HREF="#RetrievingJavaScriptCookies">
Retrieving JavaScript Cookies</A>
<LI><A HREF="#AccessingJavaScriptCookiesinInternetExplorer">
Accessing JavaScript Cookies in Internet Explorer</A>
</UL>
<LI><A HREF="#FromHere">
From Here&#133;</A>
</UL>

<HR>
<P>
Even if you're running a framed site, you may find that you need
to provide frame users the ability to turn off the frames for
faster surfing. If you offer such an option, a nice addition for
your site would be to have it &quot;remember&quot; that a particular
user surfed without frames before, and then have it automatically
return them to that mode the next time they visit. To pull this
off, you need to be able to store information about the user.
The Web mechanism that makes this possible is the <I>persistent
client-state HTTP object</I>, more commonly referred to as a <I>cookie</I>.
<H2><A NAME="WhatAreCookies"><FONT SIZE=5 COLOR=#FF0000>
What Are Cookies?</FONT></A></H2>
<P>
When you run a program on your computer, it may store information
(window placement, the name of the last file loaded, and so on)
for use the next time you fire up the same application. The Web
can do a similar trick, storing information sent from the server
for use during a future browser session. These little &quot;tidbits&quot;
of data are called <I>cookies</I>, and they can literally consist
of anything: a user ID and password, the number of times a person
has visited a site, the date and time of the user's last visit,
and so on. 
<P>
With cookies, a Web master can do these three things:
<OL>
<LI>Enhance the attractiveness of a site by using them to tailor
the site to its visitors, therefore making the site more useful
and enjoyable.
<LI>Track information internally to get a better idea of what
people like and don't like on a site.
<LI>Add functionality and simplicity for the Web visitor.
</OL>
<P>
Cookies are initially sent from the server to the browser, and
are stored in a file by the browser until the next time you surf
by the same page. The next time you drop by and your browser requests
the page from the server, it also sends the server any cookies
associated with that page-or page tree, as you'll see later.
<H3><A NAME="CookiesandSecurity">
Cookies and Security</A></H3>
<P>
With the growing concern about security and information privacy
on the Web, there is a good deal of misinformation about exactly
what cookies can and cannot do.
<P>
Because cookies are designed to store browser-specific (or user-specific)
data, they can help you with the following:
<UL>
<LI>Track your travel through a given site. Granted, you don't
need cookies to do this, but it makes things a bit easier when
you do.
<LI>Help for developing marketing or statistical information,
but <I>only</I> if they store relevant information, such as pages
visited, times visited, and so on.
<LI>Work through proxies and can be used behind firewalls.
<LI>Remember configurations and other information that would help
a commercial Web site better serve its visitors.
</UL>
<P>
By themselves, cookies are <I>not</I> a security risk and <I>cannot</I>
<UL>
<LI>Get data from your hard drive.
<LI>Retrieve your e-mail address.
<LI>Steal credit card numbers, password files, or other sensitive
information.
</UL>
<P>
Of course, if you were to provide any of the above to an HTML
form, it's not outside the bounds of the script that processes
the form to turn around and write much of that data as a collection
of cookies back to your computer.
<P>
Even if you <I>do</I> provide such information to a server and
the server writes a cookie, the cookie is restricted (by design)
to be related <I>only</I> to the server that wrote it. In other
words, you can't write a server program that reads another server's
cookies.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>CAUTION</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
Some people recommend that you periodically delete the cookie file that your browser creates (for example, Navigator on the PC stores cookies in a file called <TT>cookies.txt</TT> in the same directory as the <TT>navigator.exe</TT> file) to ensure that 
sensitive information isn't stolen by unscrupulous servers.
</BLOCKQUOTE>
<BLOCKQUOTE>
While this does no damage to your system (if the browser can't find the cookie file, it simply starts up a new one), it constantly puts you in the position of being a &quot;new user&quot; for many sites that rely on cookies to help configure their site to 

your tastes.</BLOCKQUOTE>
<BLOCKQUOTE>
Another tip is to &quot;lock&quot; your cookie file by making it read-only so no cookies can be written. This doesn't prevent cookies from being created, but it <I>will</I> prevent them from being saved.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>TIP</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
If the thought of your server and browser exchanging information &quot;behind your back&quot; still bothers you, you can control cookies through a couple of different means-either through the browser directly or through a plug-in.</BLOCKQUOTE>
<BLOCKQUOTE>
<I>Internet Fast Forward</I> is a plug-in that installs into Navigator and can be used to prevent or monitor cookie transmissions.
</BLOCKQUOTE>
<BLOCKQUOTE>
For control from within the browser itself, both Navigator 3.0 and Explorer 3.0 offer configuration options that allow the browser to warn you if a cookie is about to be exchanged and (optionally) not permit it.</BLOCKQUOTE>
<BLOCKQUOTE>
Be cautioned, though, that some sites will simply not permit you to go any further should you refuse to store their cookie, as some of them use the cookie as a security access key or a tracking flag.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="WhoCanCook">
Who Can Cook?</A></H3>
<P>
While most of the people who surf the Web use Navigator, Explorer,
or Mosaic, there are still many other browsers out there, and
not all of them support cookies. Also, because of licensing, there
are customized versions of even the popular browsers, and some
don't support cookies.
<P>
Digital Equipment Corp. has put together a script that tests your
browser for cookie support, as well as displays the results of
its tests on a rather broad selection of browsers. Here's where
you can find its script:
<P>
<B><A HREF="http://www.research.digital.com/nsl/formtest/stats-by-test/NetscapeCookie.html">http://www.research.digital.com/nsl/formtest/stats-by-test/NetscapeCookie.html</A></B>.
<P>
Browsers aren't the only restrictions to cookie use; several servers
in use don't support cookies, either. For a list of servers that
do, or servers that require specific configuration, check out
this Web site:
<P>
<B><A HREF="http://www.illuminatus.com/cookie_pages/servers.html">http://www.illuminatus.com/cookie_pages/servers.html</A></B>.
<H2><A NAME="CookieSpecifics"><FONT SIZE=5 COLOR=#FF0000>
Cookie Specifics</FONT></A></H2>
<P>
Cookies are transmitted from the server to the browser within
a document's header. If you were to look at the header block in
transit, you'd see that a cookie has the following format:
<BLOCKQUOTE>
<PRE>
Set-Cookie: name=value; expires=date; path=pathName; 
domain=domainName; secure 
</PRE>
</BLOCKQUOTE>
<P>
The five fields that make up a cookie are:
<UL>
<LI><TT>name=value</TT>- The name and value for the cookie; it
can consist of anything. For example, if you were using a cookie
to store the number of times a user has visited your site, you
could use a <TT>name</TT> of <TT>Visits</TT> and a <TT>value</TT>
that stores the number of hits, which could be incremented each
time the user stops by.
</UL>
<P>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>TIP</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
While the <TT>name</TT> and <TT>value</TT> fields can contain <I>any</I> kind of data, it's recommended that you avoid spaces and special characters. If you need to embed spaces or special characters within a cookie, you should encode these characters 
using URL-style <I>%XX</I> <I>coding</I>, where characters are replaced with a percent sign (%) followed by their hexadecimal ASCII equivalent, such as <TT>%20</TT> for a space.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<UL>
<LI><TT>expires=date</TT>-Specifies the lifetime of the cookie.
The <TT>date</TT> is specified in the following format:<BR>
<TT>Wdy, DD-Mon-YYYY HH:MM:SS GMT<BR>
</TT>and <I>must</I> be in relation to GMT, so you must convert
from local time to GMT before you set this field. If not specified,
the cookie lasts only until the user closes the browser.
</UL>
<P>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>NOTE</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
While Internet Explorer requires the entire date string (including the time) before it recognizes a cookie as valid, Navigator, on the other hand, can deal with cookies whose expire strings are as short as <TT>01-Jan-99 GMT</TT>.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<UL>
<LI><TT>path=pathName</TT>-Identifies the path on the server for
which the cookie applies. Paths are defined &quot;from the top
down,&quot; meaning that the cookie will be good for all subdirectories
below the specified directory. Most commonly, this is set to &quot;/&quot;
(the root of the server), but if you are using another provider
and running your site out of your own directories, you may wish
to restrict the path to account for only your files. If not specified,
<TT>path</TT> defaults to the path of the document that contains
the cookie.
</UL>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>NOTE</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
Because of a bug in Netscape 1.1N, if you don't specify a path of at <I>least</I> &quot;/&quot; (the server root), the cookie won't get set.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<UL>
<LI><TT>domain=domainName</TT>-specifies the domain for which
the cookie will be returned, and needs to have at least two or
three periods (.) in it, depending on the top-level domain. Domains
that end in &quot;.com,&quot; &quot;.edu,&quot; &quot;.net,&quot;
&quot;.org,&quot; &quot;.gov,&quot; &quot;.mil,&quot; or &quot;.int&quot;
require only two periods, while all other domains require three.
For example, a domain of <TT>visi.com</TT> wouldn't work, but
<TT>www.visi.com</TT> would. If not specified, <TT>domain</TT>
defaults to the host name of the server that generated the cookie
response.
</UL>
<P>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>NOTE</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
Requiring at least two periods keeps someone from creating a cookie that's good for <I>all</I> <TT>.com</TT> domains, for example.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<UL>
<LI><TT>secure</TT>-which (if present) indicates that the cookie
should be transmitted <I>only</I> if you are running a secure
server. If absent, the cookie will be sent regardless of the security
of the connection.
</UL>
<P>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><BLOCKQUOTE>
<B>CAUTION</B>
</BLOCKQUOTE>

</TD></TR>
<TR><TD><BLOCKQUOTE>
Adding <TT>secure</TT> to the end of a cookie definition does <I>not</I> make the connection secure, it only keeps the cookie from being transmitted on a non-secure port. If you're not running a secure server (one that supports SSL) and you mark all your 
cookies as <TT>secure</TT>, <I>none </I>of them will be sent.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<BLOCKQUOTE>
</BLOCKQUOTE>
<P>
Of the various fields in a cookie, only <TT>name=value</TT> must
be defined. Additionally, some other things to remember about
cookies include:
<UL>
<LI>Multiple cookies associated with a single document will be
separated by &quot;;&quot;  (semicolon-space).
<LI>The order you set a cookie's data fields in is important.
Follow the order as listed within this chapter.
<LI>New cookies are written to the hard disk only when the user
quits the browser. Modified cookies, however, are written out
immediately.
<LI>To modify a cookie, the domain, path, and name portion of
the data must match. Otherwise, it will make a new one.
<LI>According to the Netscape specifications, the browser is required
to hold a maximum of only 300 cookies and no more than 20 cookies
from the same path and domain. Browsers may choose to hold more
cookies, but they aren't required to. If more cookies are added
that exceed these limits, the oldest cookies in the file will
be deleted.
</UL>
<H2><A NAME="GeneratingCookies"><FONT SIZE=5 COLOR=#FF0000>
Generating Cookies</FONT></A></H2>
<P>
Now that you know what a cookie is and what it does, it's time
to look at how to &quot;bake&quot; your own. Cookies can be created
in several different ways:
<UL>
<LI>By sending a <TT>Set-Cookie</TT> header line in the HTML document
header.
<LI>By embedding an HTML <TT>&lt;META&gt;</TT> tag within the
document.
<LI>By manipulating the <TT>cookie</TT> string property of a <TT>document</TT>
object.
</UL>
<H3><A NAME="TheISetCookieIHeader">
The <I>Set-Cookie</I> Header</A></H3>
<P>
From the server-side, probably the easiest way to create a cookie
is to include a <TT>Set-Cookie</TT> header within the header block
of an HTML object. The <TT>Set-Cookie</TT> header line you've
already seen in the previous section:
<BLOCKQUOTE>
<PRE>
Set-Cookie: name=value; expires=date; path=pathName; 
domain=domainName; secure 
</PRE>
</BLOCKQUOTE>
<P>
Listing 4.1 is an example of setting a cookie using the response
header.
<HR>
<BLOCKQUOTE>
<B>Listing 4.1&nbsp;&nbsp;Set-Cookie<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
#!/usr/local/bin/perl

...
print &quot;Content-type: text/html\n&quot;;
print &quot;Set-Cookie: myCookie=NewCookie; expires=07-Sep-99 GMT\n\n&quot;;
print &quot;&lt;HTML&gt;&lt;BODY&gt;Cookie Set&lt;/BODY&gt;&lt;/HTML&gt;&quot;;
...
</PRE>
</BLOCKQUOTE>
<HR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>NOTE</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
Within an HTML object's header block, the order of the headers (<TT>Content-type</TT>, <TT>Set-Cookie</TT>, and so on.) isn't important. What <I>is</I> important is that the last header line has a blank line (an extra newline character) after it to inform 

the server that the header is finished and the object's body is coming next.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Deleting a cookie from an object is just as easy-you simply &quot;set&quot;
the cookie, but make the expiration date sometime in the past:
<BLOCKQUOTE>
<PRE>
print &quot;Set-Cookie: myCookie=NewCookie; expires=01-Jan-70 GMT\n\n&quot;;
<BR>
</PRE>
</BLOCKQUOTE>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>NOTE</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
Another way to delete a cookie is to &quot;set&quot; it, but leave the <TT>value</TT> attribute blank:
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>   print &quot;Set-Cookie: myCookie=; expires=07-Sep-99 GMT\n\n&quot;;</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
Unfortunately, Internet Explorer doesn't like this technique. If you attempt to delete a cookie in this manner, Explorer leaves the cookie untouched.&nbsp;N
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="TheHTMLIltMETAgtItag">
The HTML <I>&lt;META&gt;</I> tag</A></H3>
<P>
The HTML <TT>&lt;META&gt;</TT> tag provides one mechanism for
setting cookies. To set a cookie using a <TT>&lt;META&gt;</TT>
tag, you'd employ the following syntax:
<BLOCKQUOTE>
<PRE>
&lt;META HTTP-EQUIV=&quot;Set-Cookie&quot; Content=&quot;...&quot;&gt;
</PRE>
</BLOCKQUOTE>
<P>
where the <TT>Content</TT> attribute would contain the name, value,
expires, domain, path, and secure fields.
<P>
The downsides of using the <TT>&lt;META&gt;</TT> tag, however,
include:
<UL>
<LI>Currently, only Netscape Navigator supports cookie setting
via the <TT>&lt;META&gt;</TT> tag.
<LI>Unless you use a server-side script to generate the document
(and, therefore, the tag), the cookie value is fixed. While this
may work for some applications, for counters it's not practical.
</UL>
<P>
Because of the restrictions with the <TT>&lt;META&gt;</TT> tag,
using the <TT>Set-Cookie</TT> header is the preferred method.
<H3><A NAME="RetrievingCookieData">
Retrieving Cookie Data</A></H3>
<P>
Once you've created a cookie or two, reading the data back from
within Perl is no different from reading in HTML form data-you
work through an environment variable. In the case of cookies,
the variable is <TT>HTTP_COOKIE</TT>, and pulling it from the
environment retrieves <I>every</I> cookie that applies to the
document, including any cookies that were created for documents
in directories above the particular document.
<P>
Because individual cookie fields (and the cookies themselves)
are separated by a semicolon and a space, the Perl fragment in
listing 4.2 easily creates an array of cookie data.
<HR>
<BLOCKQUOTE>
<B>Listing 4.2&nbsp;&nbsp;Retrieving Cookie Data<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
#!/usr/local/bin/perl

if(defined $ENV{HTTP_COOKIE}) {
   @cookieArray = split(/; /,$ENV{HTTP_COOKIE})
}
</PRE>
</BLOCKQUOTE>
<HR>
<P>
Once you've created your cookie array, scanning for a particular
cookie is simple, as demonstrated in listing 4.3.
<HR>
<BLOCKQUOTE>
<B>Listing 4.3&nbsp;&nbsp;Getting a Cookie Value<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
# @cookieArray has been loaded previously
#
function GetCookie {
   $cookieName  = ARGV[0];
   $cookieValue = null;

   foreach(@cookieArray) {
      if($_ =~ /$cookieName/) {
         ($cookieName, $cookieValue) = split (/=/,$_)
      }

   $cookieValue;
}
</PRE>
</BLOCKQUOTE>
<HR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>TIP</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
Listing 4.2 demonstrates a format of the Perl <TT>foreach</TT> statement that might be unfamiliar to some, because it has no &quot;item variable&quot; like the following version:
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>foreach $cookie (@cookieArray) {<BR>
   if($cookie =~ /$cookieName/) {<BR>
...</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
and instead uses the Perl special variable <TT>$_</TT>. $_ is the default pattern matching variable, and when no other variable is specified, is given the result of the pattern match.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="BrowserTesting">
Browser Testing</A></H3>
<P>
Because some browsers don't support cookies, having a little script
that can identify whether a user's browser does or doesn't is
a nice little treat. You can then quietly direct them to the appropriate
part of your site (cookie or cookie-less), and it demonstrates
another Perl trick in the process.
<P>
Listing 4.4 is an example of such a &quot;cookie taster.&quot;
It works by:
<UL>
<LI>Trying to set a test cookie.
<LI>Redirecting the browser to load the page again, with a query
string switching the script into &quot;taste test&quot; mode.
<LI>Looking to see if the cookie previously set actually exists.
<LI>Redirecting the user to a different document, depending on
whether the cookie exists.
</UL>
<P>
The reason I include this is because it is transparent to the
browser; he or she just thinks that it takes a little bit too
long for your first page to load.
<P>
Instead of printing a response, the <TT>taster.cgi</TT> could
redirect browsers again to appropriate pages.
<HR>
<BLOCKQUOTE>
<B>Listing 4.4&nbsp;&nbsp;Cookie Taste Test<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
#!/usr/local/bin/perl

$me = 'taste.cgi';

if($ENV{'QUERY_STRING'} eq 'TEST') {
   if($ENV{'HTTP_COOKIE'} =~ /Cookie=Test/) {
      $newDoc = &quot;cookieDoc.html&quot;;
   } else {
      $newDoc = &quot;noCookies.html&quot;;
   }

   print &quot;Location: $newDoc\n\n&quot;;
} else {
   #
   print &quot;Location: $me?TEST\n&quot;;
   print &quot;Set-Cookie: Cookie=Test\n\n&quot;;
   print &quot;&lt;HTML&gt;&lt;BODY&gt;&lt;/BODY&gt;&lt;/HTML&gt;&quot;;
}
</PRE>
</BLOCKQUOTE>
<HR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>NOTE</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
This will not work on all servers, because some servers optimize the header information by putting all header lines on one physical line by removing the newline characters between individual header fields. According to the HTTP specification, this is 
valid, but Netscape Navigator won't recognize a <TT>Set-Cookie</TT> directive unless it's on a line of its own.
</BLOCKQUOTE>
<BLOCKQUOTE>
For a list of servers that handle cookies properly (and those that don't, and why), check out:</BLOCKQUOTE>
<BLOCKQUOTE>
<B><A HREF="http://www.illuminatus.com/cookie_pages/servers.html">http://www.illuminatus.com/cookie_pages/servers.html</A>.</B>
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H2><A NAME="UsingJavaScriptCookies"><FONT SIZE=5 COLOR=#FF0000>
Using JavaScript Cookies</FONT></A></H2>
<P>
The <TT>cookie</TT> property of the <TT>document</TT> object is
the JavaScript wrapper for the cookie interface. Just as cookies
are a very long string in Perl, in JavaScript the <TT>cookie</TT>
object is of the <TT>string</TT> type. Therefore, the manipulations
to create, delete, and read cookies are very similar to their
Perl counterparts.
<H3><A NAME="CreatingJavaScriptCookies">
Creating JavaScript Cookies</A></H3>
<P>
Listing 4.5 is a JavaScript function that creates a cookie. It
takes advantage of a JavaScript function's ability to handle more
parameters than are defined by testing the <TT>arguments</TT>
property of the function.
<HR>
<BLOCKQUOTE>
<B>Listing 4.5&nbsp;&nbsp;Setting a Cookie with JavaScript<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
function SetCookie(name, value) {
   var argv    = SetCookie.arguments;
   var argc    = SetCookie.arguments.length;
   var expires = (argc &gt; 3) ? new Date(argv[3]) : null;
   var path    = (argc &gt; 4) ? argv[4] : null;
   var domain  = (argc &gt; 5) ? argv[5] : null;
   var secure  = (argc &gt; 6) ? argv[6] : false;

   document.cookie = name + &quot;=&quot; + escape(value)
      + ((expires == null) ? &quot;&quot; : (&quot;; expires=&quot; + expires.toGMTString()))
      + ((path == null) ? &quot;&quot; : (&quot;; path=&quot; + path))
      + ((domain == null) ? &quot;&quot; : (&quot;; domain=&quot; + domain))
      + ((secure == true) ? &quot;; secure&quot; : &quot;&quot;);
}
</PRE>
</BLOCKQUOTE>
<HR>
<P>
You use this function as follows:
<BLOCKQUOTE>
<PRE>
SetCookie(name, value [, expires, path, domain, secure]);
</PRE>
</BLOCKQUOTE>
<P>
where &quot;name,&quot; &quot;value,&quot; &quot;expires,&quot;
&quot;path,&quot; &quot;domain,&quot; and &quot;secure&quot; correspond
to the previously introduced cookie components. Note that the
last four parameters are optional (as indicated by the square
brackets). For example, to set a cookie named <TT>count</TT> to
the number of times a user has visited your site, you could call
<TT>SetCookie()</TT> as follows:
<P>
<TT>SetCookie(&quot;count&quot;, &quot;5&quot;);</TT>
<P>
which would make the <TT>count</TT> cookie available to all the
pages on your site because &quot;domain&quot; and &quot;path&quot;
revert to their default values. The cookie itself, because the
<TT>expires</TT> property wasn't specified, would exist only until
the user closes his or her browser.
<P>
Deleting a cookie through JavaScript is no different from deleting
a cookie in Perl-simply set the cookie's <TT>expires</TT> parameter
to a time in the past.
<H3><A NAME="RetrievingJavaScriptCookies">
Retrieving JavaScript Cookies</A></H3>
<P>
Listing 4.6 demonstrates retrieving cookies through JavaScript.
As with Perl, you scan through the cookie string looking for the
substring <TT>name=</TT>, where <TT>name</TT> is the desired cookie.
If the substring is found, everything after the equal sign and
before the next semicolon will be the cookie's value.
<HR>
<BLOCKQUOTE>
<B>Listing 4.6&nbsp;&nbsp;Retrieving Cookies with JavaScript<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
function GetCookie(name) {
   var arg  = name + &quot;=&quot;;
   var alen = arg.length;
   var clen = document.cookie.length;
   var i    = 0;

   while(i &lt; clen) {
      var offset = i + alen;

      if(document.cookie.substring(i, offset) == arg) {
         var iEnd  = document.cookie.indexOf(&quot;;&quot;, offset);

         if(iEnd == -1) {
            iEnd = document.cookie.length;
         }

         return unescape(document.cookie.substring(offset, iEnd));
      }

      i = document.cookie.indexOf(&quot; &quot;, i) + 1;

      if(i == 0) {
         break;
      }
   }

   return null;
}
</PRE>
</BLOCKQUOTE>
<HR>
<H3><A NAME="AccessingJavaScriptCookiesinInternetExplorer">
Accessing JavaScript Cookies in Internet Explorer</A></H3>
<P>
Internet Explorer supports cookies, but not from within <I>JScript,</I>
Microsoft's name for its implementation of JavaScript. Fortunately,
getting around this is relatively easy, <I>if</I> all you intend
to use cookies for is keeping track of things during the current
visit to your site.
<P>
Basically, you &quot;wrap&quot; the cookie functions with a browser
test:
<BLOCKQUOTE>
<PRE>
if(navigator.appName.indexOf(&quot;Netscape&quot;) != -1) {
   // Safe to use cookie object
} else {
   // no cookie object, go to Plan B
}
</PRE>
</BLOCKQUOTE>
<P>
Even though Explorer doesn't support cookies, you can still make
use of them by doing the following:
<UL>
<LI>Creating global variables of the same name as your cookies.
<LI>Using the conditional wrapping test shown. &quot;Plan B&quot;
is a code block that either sets the local variable or retrieves
its value.
</UL>
<P>
This is actually easier than it sounds, thanks to the JavaScript
<TT>eval()</TT> function, which takes its parameter and evaluates
it as though it were a JavaScript statement. This means that
<BLOCKQUOTE>
<PRE>
eval(&quot;myGlobal=10&quot;);
</PRE>
</BLOCKQUOTE>
<P>
would set the global variable <TT>myGlobal</TT> to <TT>10</TT>.
This makes it possible to keep the cookie functions generic. Listing
4.7 is a code fragment that takes the <TT>GetCookie()</TT> and
<TT>SetCookie()</TT> functions and sets them up to work within
Explorer.
<HR>
<BLOCKQUOTE>
<B>Listing 4.7&nbsp;&nbsp;Explorer Cookies<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
function GetCookie(name) {
   if(navigator.appName.indexOf(&quot;Netscape&quot;) != -1) {
      // GetCookie manipulation code
   } else {
      return eval(name);
   }
}

function SetCookie(name, value) {
   if(navigator.appName.indexOf(&quot;Netscape&quot;) != -1) {
      // SetCookie manipulation code
   } else {
      eval(name + &quot; = '&quot; + value + &quot;'&quot;);
   }
}
</PRE>
</BLOCKQUOTE>
<HR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>NOTE</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
It's important to point out that this technique works only if you've centralized your source code into a top-level frame. Once a page is unloaded, all the &quot;cookie&quot; data is lost. However, if you've located your JavaScript code within the parent 
document of your site, this trick has the same effect as creating cookies that last only for the duration of the user's browsing session-except it's limited to your site instead of the entire browser session.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H2><A NAME="FromHere"><FONT SIZE=5 COLOR=#FF0000>
From Here&#133;</FONT></A></H2>
<P>
This chapter presents a brief introduction to cookies, the mechanism
by which you can store client-specific data on a user's computer.
They can be helpful for many things, such as online ordering systems.
An online ordering system could be developed using cookies that
would remember what a person wants to buy-this way, if a person
spends three hours ordering CDs at your site and suddenly has
to get off the Internet, he or she could quit the browser and
return weeks or even years later and still have those items in
his or her shopping basket.
<P>
Site personalization is another use for cookies. This is one of
the coolest uses. Suppose a person comes to your site but doesn't
want to see any banner advertisements. You could allow him or
her to select this as an option and from then on until the cookie
expires, he or she wouldn't see them.
<P>
Also, using a cookie in conjunction with a server-side script
to store the information for tallying to track the number of visits
(or <I>hits</I>) to your site, or number of times a single person
visits.
<P>
For more information on related topics, check out:
<UL>
<LI><A HREF="ch5.htm" >Chapter 5</A> &quot;Creating Personalized Home Pages,&quot; where
you learn to design a home page using cookies.
<LI><A HREF="ch19.htm" >Chapter 19</A>, &quot;Shopping Cart,&quot; examines how to retain
product information as visitors &quot;shop.&quot;
</UL>
<HR>

<CENTER><P><A HREF="ch3.htm"><IMG SRC="pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="#CONTENTS"><IMG SRC="cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="index.htm"><IMG SRC="hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="ch5.htm"><IMG SRC="nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<HR WIDTH="100%"></P></CENTER>
</BODY>
</HTML>
