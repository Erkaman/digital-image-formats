<HTML>
<HEAD>
<TITLE>Chapter 14 -- Form Processing</TITLE>

<META NAME="GENERATOR" CONTENT="Internet Assistant for Microsoft Word 2.0z">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT SIZE=6 COLOR=#FF0000>Chapter&nbsp;14</FONT></H1>
<H1><FONT SIZE=6 COLOR=#FF0000>Form Processing</FONT></H1>
<HR>
<P>
<CENTER><B><FONT SIZE=5><A NAME="CONTENTS">CONTENTS</A></FONT></B></CENTER>
<UL>
<LI><A HREF="#FormBasedEMail">
Form-Based E-Mail</A>
<LI><A HREF="#ParameterPassing">
Parameter Passing</A>
<LI><A HREF="#RetrievingFormFields">
Retrieving Form Fields</A>
<LI><A HREF="#UsingSendmail">
Using Sendmail</A>
<LI><A HREF="#MailHandlingAdditionsandEnhancements">
Mail Handling Additions and Enhancements</A>
<LI><A HREF="#FromHere">
From Here&#133;</A>
</UL>

<HR>
<P>
The previous chapter introduces some tricks for validating the
data entered by a user within a form. Now that the information
has been verified, what do you do with it? As an open-ended question,
this depends greatly on the intent of the particular form, but
there are several common things that Web designers want to do
with form data.
<H2><A NAME="FormBasedEMail"><FONT SIZE=5 COLOR=#FF0000>
Form-Based E-Mail</FONT></A></H2>
<P>
Web browsers have built-in support for interfacing e-mail addresses
into HTML pages. Within a hyperlink, you can force the user's
mailer to be launched automatically simply by using the <TT>mailto:</TT>
protocol:
<BLOCKQUOTE>
<PRE>
mailto:sjwalter@visi.com
</PRE>
</BLOCKQUOTE>
<P>
However, for various reasons, this may not be the most ideal system.
Specifically, <TT>mailto:</TT> doesn't give you explicit control
over the structure of the e-mail sent; for example, creating a
specific subject line, if you're running a mail script that scans
for such lines. While Netscape has made some extensions to the
<TT>mailto:</TT> protocol permitting you to pass additional information
to the mail client, they are not considered part of the standard
(only Netscape browsers support them).
<P>
You can still get the level of control you desire by designing
an HTML form to serve as the front-end to the mail system, then
having a Perl script do the work of formatting and sending the
e-mail the way you want. Additionally, using form-based e-mail
permits you to seamlessly integrate mail handling into your site
(as shown in fig. 14.1), without having to bother the user with
additional programs-in this case, their mailer-being launched.
<P>
<A HREF="f14-1.gif"><B>Figure 14.1 :</B> <I>Using form-based e-mail makes the addition
of a mail interface look just like the rest of your Web site</I>.</A>
<H2><A NAME="ParameterPassing"><FONT SIZE=5 COLOR=#FF0000>
Parameter Passing</FONT></A></H2>
<P>
You can pass &quot;parameters&quot; from within a form by taking
advantage of the <TT>HIDDEN</TT> object type within the form's
definition. Hidden objects are identical to <TT>TEXT</TT> objects,
except that they aren't formatted for display, giving you a storage
space within the form structure for additional text that can be
used to customize a generic mail processing script to the particulars
of your form.
<P>
For example, if you were constructing a &quot;help-desk&quot;
form, where a user can pose a question to you, you would want
the three following fields:
<OL>
<LI>The user's real name
<LI>The user's e-mail address
<LI>A &quot;comments&quot; field, where the user can describe
the problem
</OL>
<P>
Additionally, you would want to specify the following fields,
but with predetermined (non-user editable) values:
<UL>
<LI>A subject line, so that your mail sorting software can quickly
identify inbound help requests and route them to the appropriate
person or folder. 
<LI>The e-mail address of the recipient, so that the user doesn't
have to specifically know (or care) who is getting the e-mail;
just that it's being handled.
</UL>
<P>
These two fields are then ideal candidates for hidden fields.
Listing 14.1 presents an HTML fragment that outlines a <TT>&lt;FORM&gt;</TT>
tag formatted to the above requirements.
<HR>
<BLOCKQUOTE>
<B>Listing 14.1&nbsp;&nbsp;Using Hidden Fields for Parameters
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
&lt;FORM METHOD=POST ACTION=&quot;/cgi-bin/e-mail.cgi&quot;&gt;
   &lt;INPUT TYPE=HIDDEN NAME=&quot;sendto&quot;  VALUE=&quot;sjwalter@visi.com&quot;&gt; 
   &lt;INPUT TYPE=HIDDEN NAME=&quot;subject&quot; VALUE=&quot;Help!!!!!&quot;&gt; 

   Your name: &lt;INPUT TYPE=TEXT NAME=&quot;realname&quot; SIZE=40&gt;
   Your e-mail address: &lt;INPUT TYPE=TEXT NAME=&quot;e-mail&quot; SIZE=40&gt;

   &lt;P&gt;

   Please describe your problem:&lt;BR&gt;
   &lt;TEXTAREA TYPE=TEXT NAME=&quot;problem&quot; WRAP COLS=60 ROWS=15&gt;
   &lt;/TEXTAREA&gt;

   &lt;INPUT TYPE=SUBMIT NAME=&quot;submit&quot; VALUE=&quot;Submit Problem&quot;&gt;
   &lt;INPUT TYPE=RESET NAME=&quot;reset&quot; VALUE=&quot;    Clear     &quot;&gt;
&lt;/FORM&gt;
</PRE>
</BLOCKQUOTE>
<HR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><BLOCKQUOTE>
<B>CAUTION</B>
</BLOCKQUOTE>

</TD></TR>
<TR><TD><BLOCKQUOTE>
It is mentioned in other chapters that caution should be taken when designing script processing that relies on the input from a user. If the data the user enters is going to be treated, at any time, as data to process (for example, embedding HTML tags 
within a comment block for formatting on a graffiti wall), it's critical that you take steps to ensure that the user can't enter any script-level commands that would change the manner of processing. If this were to happen, the user could potentially gain 
access to your system in an undesirable way.</BLOCKQUOTE>
<BLOCKQUOTE>
Hidden form fields can be as dangerous depending on how the field is to be processed, as a &quot;savvy&quot; user can simply download your form page to his or her machine, edit it locally, and then run the local copy (complete with edited fields) that your 

server would treat just as though it were your own form page.</BLOCKQUOTE>
<BLOCKQUOTE>
To circumvent this, make certain that any hidden fields you specify deal with information that <I>doesn't</I> generate disastrous side effects if the data is modified, such as specifying paths within your system for reading and writing files.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
One major advantage of implementing parameters within the form
is that it allows you, the Web administrator, to install a generic
form-to-e-mail script that all your users can utilize within their
own pages. In this way you can offer form processing as a service
without having to give users access to the CGI directories.
<P>
Once the user has clicked the <TT>Submit</TT> button, all data,
including hidden fields, is transmitted to the server for processing
by the CGI script.
<H2><A NAME="RetrievingFormFields"><FONT SIZE=5 COLOR=#FF0000>
Retrieving Form Fields</FONT></A></H2>
<P>
The standard Perl technique for loading values from form fields
applies to mail forwarding as it does for any form processing.
Simply retrieve the contents of the <TT>CONTENT_LENGTH</TT> environment
variable and split it into the individual fields name/value pairs
(as shown in listing 14.2).
<HR>
<BLOCKQUOTE>
<B>Listing 14.2&nbsp;&nbsp;Creating a Named List of Form Fields
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
read(STDIN, $buffer, $ENV{'CONTENT_LENGTH'});
@pairs = split(/&amp;/, $buffer);

foreach $pair (@pairs) {
   ($name, $value) = split(/=/, $pair, 2);
   $value =~ tr/+/ /;
   $value =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack(&quot;C&quot;, hex($1))/eg;
   $contents{$name} = $value;
}
</PRE>
</BLOCKQUOTE>
<HR>
<P>
Remember that spaces within field values are converted into plus
signs (+) before they're transmitted back to the server. Therefore,
it's necessary to convert them <I>back</I> to spaces. Additionally,
special characters are often %-encoded for transmission, so converting
them back is also necessary.
<P>
With the fields now in memory for processing, it's time to fire
up the mail program and send the e-mail on its way.
<H2><A NAME="UsingSendmail"><FONT SIZE=5 COLOR=#FF0000>
Using Sendmail</FONT></A></H2>
<P>
<I>Sendmail</I> is by far the most commonly used mail agent among
UNIX systems today. It is powerful and highly configurable. In
fact, rather thick texts have been written dealing with nothing
but its installation and maintenance. The beauty of this program
is that it can take data from <I>standard input</I> and treat
it as if it's a mail message to process-as long as the data is
in the correct format.
<P>
The general format for e-mail when dealing with sendmail is:
<UL>
<LI>A header section consisting of the <TT>To:</TT>, <TT>From:</TT>,
and <TT>Subject:</TT> fields, as well as any additional fields
that further control processing. 
<LI>A blank line that indicates the end of the header block and
beginning of the body.
<LI>A body section that holds the content of the message.
</UL>
<P>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>NOTE</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
Most information thrown around in &quot;Internet format&quot; uses the <I>header-blank-body</I> structure. The blank line between <I>header</I> and <I>body</I> is critical. Without it, <I>sendmail</I> or the Web server doesn't know when to stop processing 

directives and start treating input as content.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Sendmail is run in &quot;standard input mode&quot; by including
the <TT>-t</TT> parameter on its command line. From Perl, this
is handled by including the parameter as part of the <TT>open()
</TT>command:
<BLOCKQUOTE>
<PRE>
open(MAIL,&quot;|sendmail -t&quot;);
</PRE>
</BLOCKQUOTE>
<P>
which opens up a file handle <TT>MAIL</TT> that's hooked into
sendmail's input. Normally, you'll want to specify the complete
path to the location of the sendmail program in order to ensure
that it's found and able to run when needed.
<P>
With the &quot;file&quot; opened, regular Perl <TT>print</TT>
commands can be used to send the e-mail to sendmail (as shown
in listing 14.3).
<HR>
<BLOCKQUOTE>
<B>Listing 14.3&nbsp;&nbsp;Sending Mail<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
print MAIL, &quot;To: $contents{'sendto'}\n&quot;;
print MAIL, &quot;From: $contents{'e-mail'}\n&quot;;
print MAIL, &quot;Subject: $contents{'subject'}\n\n&quot;;
print MAIL, $contents{'problem'}\n&quot;
</PRE>
</BLOCKQUOTE>
<HR>
<P>
Because the <TT>Subject:</TT> line is the last line of the mail
header in this example, the addition of a second newline character
(\n) forces the blank line separating header from body.
<P>
Closing the file handle with the Perl <TT>close()</TT> statment
completes the message stream and lets sendmail start the process
of directing the e-mail to its proper destination.
<H2><A NAME="MailHandlingAdditionsandEnhancements"><FONT SIZE=5 COLOR=#FF0000>
Mail Handling Additions and Enhancements</FONT></A></H2>
<P>
This is an example of a very basic mail handling script. Many
of the scripts are freely available on the Web, some of which
you'll find on the companion CD-ROM. They have many more features,
such as:
<BLOCKQUOTE>
Sends a customized &quot;your e-mail has been sent&quot; document
back to the user.
</BLOCKQUOTE>
<BLOCKQUOTE>
Includes additional information about the browser, such as the
type of program, operating system, and so on within the body of
the mail message.
</BLOCKQUOTE>
<BLOCKQUOTE>
Allows the users to request that a copy of the e-mail sent be
forwarded back to their mail accounts for their own records.
</BLOCKQUOTE>
<BLOCKQUOTE>
Tests the validity of the e-mail address destination.
</BLOCKQUOTE>
<BLOCKQUOTE>
Tests the validity of <I>any</I> of the fields to make sure that
someone doesn't waste your time by sending an empty message, or
one that's missing critical data.
</BLOCKQUOTE>
<P>
The amount of flexibility you want to implement is up to you.
<H2><A NAME="FromHere"><FONT SIZE=5 COLOR=#FF0000>
From Here&#133;</FONT></A></H2>
<P>
This chapter takes a brief look at the process of integrating
a mail system into your Web pages. For related topics, check out:
<UL>
<LI><A HREF="ch1.htm" >Chapter 1</A> &quot;Browser Identification,&quot; gives you information
about other environment variables available within Perl.
<LI><A HREF="ch9.htm" >Chapter 9</A> &quot;Bulletin Boards,&quot; shows you another
use of form-processing: a Web-based discussion forum.
<LI><A HREF="ch12.htm" >Chapter 12</A>, &quot;Guestbook/Graffiti Wall,&quot; demonstrates
turning your form processing into the front end for a registration
page.
<LI><A HREF="ch13.htm" >Chapter 13</A>, &quot;Field Verification,&quot; shares further
examples on client- and server-side validation of form fields.
</UL>
<HR>

<CENTER><P><A HREF="ch13.htm"><IMG SRC="pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="#CONTENTS"><IMG SRC="cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="index.htm"><IMG SRC="hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="ch15.htm"><IMG SRC="nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<HR WIDTH="100%"></P></CENTER>
</BODY>
</HTML>
