<HTML>
<HEAD>
<TITLE>Chapter 24 -- Designing an eZine</TITLE>

<META NAME="GENERATOR" CONTENT="Internet Assistant for Microsoft Word 2.0z">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT SIZE=6 COLOR=#FF0000>Chapter&nbsp;24</FONT></H1>
<H1><FONT SIZE=6 COLOR=#FF0000>Designing an eZine</FONT></H1>
<HR>
<P>
<CENTER><B><FONT SIZE=5><A NAME="CONTENTS">CONTENTS</A></FONT></B></CENTER>
<UL>
<LI><A HREF="#AFlexibleFramework">
A Flexible Framework</A>
<LI><A HREF="#eZineComponents">
eZine Components</A>
<LI><A HREF="#CentralizingSourceCode">
Centralizing Source Code</A>
<LI><A HREF="#CustomizingFrameDisplay">
Customizing Frame Display</A>
<LI><A HREF="#FramelessBrowsing">
Frameless Browsing</A>
<LI><A HREF="#FramelessBrowsers">
Frameless Browsers</A>
<LI><A HREF="#FromHere">
From Here&#133;</A>
</UL>

<HR>
<P>
The power of the Web is that it gives everyone the ability to
have their own home page.The Web lets you create a home page site
that expounds your opinion on anything from politics to pound
cake. It's also been shown that it doesn't really matter what
the subject matter is, just as long as it's presented in an interesting
and appealing way. If you script it, they will come&#133; .
<P>
The publishing of opinions is no longer restricted to those with
expensive presses and massive distribution networks; you, too,
can be the editor of your own little &quot;eEmpire.&quot;
<P>
In this chapter, you'll be introduced to eZine, a framework you
can use to create and publish your own electronic online magazine.
<H2><A NAME="AFlexibleFramework"><FONT SIZE=5 COLOR=#FF0000>
A Flexible Framework</FONT></A></H2>
<P>
The eZine framework presented here:
<BLOCKQUOTE>
Works equally well whether you have access to your server's CGI
interface or not. The framework is written entirely in JavaScript
with a VBScript version available on the accompanying CD-ROM.
</BLOCKQUOTE>
<BLOCKQUOTE>
Is open enough to work with frames or without, providing a pleasing
presentation to those not using Netscape Navigator or Internet
Explorer.
</BLOCKQUOTE>
<P>
The most important facet of eZine is that it's a <I>framework</I>,
a template that presents information in a standard form. With
it you can incorporate many of the other scripting options covered
in this book-online chat, form processing, and advertising. The
design also integrates with virtually any kind of site. If your
Web site consists of a main access point (home page) with several
subsections, it could probably benefit from the framework. Browse
the companion CD-ROM to see an adapted version of the eZine framework
to categorize the data.
<H2><A NAME="eZineComponents"><FONT SIZE=5 COLOR=#FF0000>
eZine Components</FONT></A></H2>
<P>
Any magazine, electronic or otherwise, consists of the following
parts:
<BLOCKQUOTE>
A title<BR>
A table of contents<BR>
Many articles
</BLOCKQUOTE>
<P>
The eZine framework extends this configuration by adding two additional
components:
<OL>
<LI>A home button to return to the front of the eZine from anywhere
within.
<LI>A frame control option to turn frames on or off, depending
on the user's preference.
</OL>
<P>
Figure 24.1 shows what the user sees when the browser window divides
into the following frames:
<P>
<A HREF="f24-1.gif"><B>Figure 24.1 :</B> <I>The eZine framework in action. Notice that
under Internet Explorer, the visible frames are turned off to
increase available screen real estate and to create a pleasing
interface</I>.</A>
<UL>
<LI>Home-provides a quick way to get back to the cover page. This
would also be an excellent place for an animated image or logo
graphic.
<LI>Title-displays the title of the eZine.
<LI>Table of contents (TOC)-lists the contents of the eZine and
doubles as the control panel for access to the individual articles.
<LI>Body-displays the rest of the magazine, including cover page,
articles, and so on.
</UL>
<P>
Additional sections can be treated as additional articles, making
the extension of this framework a straightforward process. The
source code on the CD-ROM is thorough, so we'll look only at the
important points within the chapter.
<H2><A NAME="CentralizingSourceCode"><FONT SIZE=5 COLOR=#FF0000>
Centralizing Source Code</FONT></A></H2>
<P>
One eagerly awaited feature of JavaScript is the ability to load
source code from an external file through the addition of an <TT>SRC</TT>
attribute to the <TT>&lt;SCRIPT&gt;</TT> tag. This makes it possible
to create libraries of routines that can be pulled into any page,
reducing the amount of replication needed when scripting a site.
As of Navigator 3, you can now relocate your JavaScript source
in an external file with a tag like:
<BLOCKQUOTE>
<PRE>
&lt;SCRIPT LANGUAGE=&quot;JavaScript&quot; SRC=&quot;myScripts.js&quot;&gt;
</PRE>
</BLOCKQUOTE>
<P>
However, only Navigator 3.0 currently supports this feature. If
you want to maintain some backward compatibility with people using
earlier versions of their browsers that may still support JavaScript,
questions arise: Do you double the amount of work you must do
to maintain your site, or do you restrict site access to those
who are using the latest browser versions?
<P>
While doubling the amount of work isn't an acceptable option,
restricting access may not be either. What you're presenting to
the Web may be of a specific nature. If your site, for example,
is dedicated to these new technologies, restricting access may
be practical. If you're building a more general site, however,
you don't want to restrict surfers simply because they choose
to use another or earlier type of browser.
<P>
Fortunately, the framework presented here takes this into account
by showing you another way of centralizing source code that works
under all versions of browsers with JavaScript support. It relies
on the fact that JavaScript-enabled browsers also support frames,
and that it's possible to create a frame that takes up the entire
client area.
<P>
Listing 24.1 is a fragment of the <TT>index.htm</TT> file, the
main entry point into the site.
<HR>
<BLOCKQUOTE>
<B>Listing 24.1<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
&lt;FRAMESET ROWS='100%,*'&gt;
   &lt;FRAME SRC='index2.htm' NAME='_main' FRAMEBORDER=0 BORDER=0&gt;
   &lt;FRAME NAME='_dummy' BORDER=0 FRAMEBORDER=0&gt;
&lt;/FRAMESET&gt;
</PRE>
</BLOCKQUOTE>
<HR>
<P>
This sets up one frame, <TT>_main</TT>, as the topmost frame of
the site and gives it the entire client area to display its content.
The file loaded into <TT>_main</TT>, <TT>index2.htm</TT> is the
actual index that breaks the page into the various frame parts,
creating a loading structure as shown in figure 24.2.
<P>
<A HREF="f24-2.gif"><B>Figure 24.2 :</B> <I>By creating one top-level frame that encases
all the display frames, you've created a central location to store
your scripting code</I>.</A>
<P>
While Navigator and Internet Explorer frames have 100 percent
of the client area, they don't like a top-level frameset that
has only one frame. To satisfy the HTML parser, define a second
frame called <TT>_dummy</TT>, as a place holder. It has no height
and doesn't affect the visual display.
<P>
Now that this fake frame is created, you can place all of the
JavaScript methods in <TT>index.htm</TT>. These can be referenced
from any document within the frame tree using the special JavaScript
reserved word <TT>top</TT>, which accesses the topmost window
or frame of a tree:
<BLOCKQUOTE>
<PRE>
top.functionName(...);
</PRE>
</BLOCKQUOTE>
<P>
This is used to centralize the JavaScript functions that display
notices within the browser's status bar. It is still necessary
to define the strings to display within the respective documents,
but you don't need to copy the message display function into each
file.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><BLOCKQUOTE>
<B>CAUTION</B>
</BLOCKQUOTE>

</TD></TR>
<TR><TD><BLOCKQUOTE>
This structure makes the assumption that <TT>_main</TT> will be the top-level frame. Some sites, especially reference sites that have links to other places on the Internet, may themselves be framed and, erroneously, could open your site within their own 
frame structure, effectively breaking the design.
</BLOCKQUOTE>
<BLOCKQUOTE>
To make sure this does not happen, change the way you access <TT>_main</TT> by referencing it from the position of the current document within the frametree, as in:
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>parent.parent.functionName(...);</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
Keep in mind that to do this you must access the &quot;parent&quot; of your &quot;parent&quot; (as shown), because <TT>_main</TT> (effectively <TT>index2.htm</TT>) sits within the tree as well. An easy way to remember this is to look at figure 24.2 and, 
starting from the frame you're in, for each level you have to move through to get to <TT>top</TT>, add another <TT>parent.</TT> To get from <TT>Body</TT> to <TT>top</TT>, for example, you must move 2 levels up, hence the use of <TT>parent.parent....</TT> 
instead of just <TT>parent....</TT>.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<BLOCKQUOTE>
</BLOCKQUOTE>
<P>
There is one last caveat to consider when using this technique.
If you look in <TT>toc.htm</TT>, you'll see that the individual
links are defined as follows:
<BLOCKQUOTE>
<PRE>
&lt;A HREF=&quot;story1.htm&quot; TARGET=&quot;Body&quot;
   ONMOUSEOVER=&quot;return top.message(window, msg['story1']);&quot;&gt;Story 1&lt;/A&gt;
</PRE>
</BLOCKQUOTE>
<P>
The <TT>message()</TT> function, which copies the string passed
to it into the status bar, requires that you send the <TT>window</TT>
parameter to pass a pointer to the current window. Without this,
JavaScript can't resolve the <TT>status</TT> property, which is
part of the <TT>window</TT> object, and won't set the text correctly.
This is actually quite common for any functions that (if included
directly within a document) rely on the <TT>self</TT> keyword
to resolve the desired object. The minute you start to reach from
one frame into the next, <TT>self</TT> is no longer guaranteed
to work correctly, and you need to pass &quot;window&quot; to
force the correct resolution.
<H2><A NAME="CustomizingFrameDisplay"><FONT SIZE=5 COLOR=#FF0000>
Customizing Frame Display</FONT></A></H2>
<P>
In addition to JavaScript support, with the release of Internet
Explorer 3.0, Microsoft added frame support, including the ability
to make the frame borders invisible. This is also present in Navigator
3.0, but for those using earlier versions of Navigator, the site
would look like figure 24.3.
<P>
<A HREF="f24-3.gif"><B>Figure 24.3 :</B> <I>Under earlier versions of Netscape navigator,
frames always display borders of a fixed size</I>.</A>
<P>
Internet Explorer and Navigator compute frame sizing differently.
Each browser utilizes different metrics for internal page margins.
Text can look great under one browser but appears at the bottom
of the frame and clipped in the other. Surfing the Web produces
countless examples of this, making it easy to identify sites that
were designed with only one browser in mind.
<P>
This is when to use the Gatekeeper technique. It requires you,
unfortunately, to create two complete sites: one optimized for
Navigator and one for Internet Explorer. In other words, this
is not necessarily the best option.<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>NOTE</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
For more information on the Gatekeeper system, see chapter 1, &quot;Browser Identification.&quot;</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
For the purposes of the eZine, the only major difference between
Internet Explorer and Navigator is in the sizing of certain frames.
The rest of the documents load equally well under either browser,
so all that really needs to be done is to selectively configure
the frame sizes to the particular browser. Because JavaScript
allows you to write straight HTML out to the document stream,
you can easily accomplish this by wrapping the <TT>&lt;FRAMESET&gt;</TT>
tags (from <TT>index2.htm</TT>) with some scripting code to create
the appropriate sizing. This is shown by the code fragment in
listing 24.2.
<HR>
<BLOCKQUOTE>
<B>Listing 24.2&nbsp;&nbsp;Browser-Specific FRAMESET Generation
from index2.htm<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
&lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;
&lt;!-- begin hide
if(top.isNetscape()) {
   document.write(&quot;&lt;FRAMESET ROWS='40,*'&gt;&quot;);
   document.write(&quot;   &lt;FRAMESET COLS='100,*'&gt;&quot;);
} else {
   document.write(&quot;&lt;FRAMESET ROWS='32,*' FRAMESPACING=0&gt;&quot;);
   document.write(&quot;   &lt;FRAMESET COLS='90,*'&gt;&quot;);
}

document.write(&quot;      &lt;FRAME SRC='home.htm' NORESIZE NAME='Home'&quot;);
document.write(&quot;             MARGINWIDTH=0 MARGINHEIGHT=4 SCROLLING=NO&gt;&quot;);
document.write(&quot;      &lt;FRAME SRC='title.htm' NORESIZE NAME='Title'&quot;);
document.write(&quot;             MARGINWIDTH=0 MARGINHEIGHT=0 SCROLLING=NO&gt;&quot;);
document.write(&quot;   &lt;/FRAMESET&gt;&quot;);

if(top.isNetscape()) {
   document.write(&quot;   &lt;FRAMESET COLS='100,*'&gt;&quot;);
} else {
   document.write(&quot;   &lt;FRAMESET COLS='90,*'&gt;&quot;);
}

document.write(&quot;      &lt;FRAME SRC='toc.htm' NORESIZE NAME='TOC'&quot;);
document.write(&quot;             MARGINWIDTH=1 MARGINHEIGHT=4 SCROLLING=NO&gt;&quot;);
document.write(&quot;      &lt;FRAME SRC='cover.htm' NORESIZE NAME='Body'&quot;);
document.write(&quot;             SCROLLING=AUTO&gt;&quot;);
document.write(&quot;  &lt;/FRAMESET&gt;&quot;);
document.write(&quot;&lt;/FRAMESET&gt;&quot;);
// end hide --&gt;
&lt;/SCRIPT&gt;
</PRE>
</BLOCKQUOTE>
<HR>
<P>
This takes advantage of code centralization to store the <TT>isNetscape()</TT>
function in the master frame. It simply scans the <TT>navigator</TT>
object for the necessary identification string:
<BLOCKQUOTE>
<PRE>
function isNetscape() {
   return navigator.appName.indexOf(&quot;Netscape&quot;) != -1;
}
</PRE>
</BLOCKQUOTE>
<P>
A matching function, <TT>isMicrosoft()</TT>, checks for the string
<TT>Microsoft</TT> and can be used elsewhere in the framework
to handle Internet Explorer-specific behavior.
<H2><A NAME="FramelessBrowsing"><FONT SIZE=5 COLOR=#FF0000>
Frameless Browsing</FONT></A></H2>
<P>
Not everyone likes frames because they use up screen space and,
if not properly designed, they produce sites that don't look esthetically
pleasing when viewed under certain browsers. Not wanting to get
into the framed versus non-framed debate, the eZine framework
offers the option for the user to turn frames off.
<P>
Turning frames off is accomplished by providing an additional
option in the table of contents that reloads the current contents
of the <TT>Body</TT>, one frame-level up. This eliminates all
subframes. The code to display this link (listing 24.3) is found
in <TT>toc.htm</TT>.
<HR>
<BLOCKQUOTE>
<B>Listing 24.3&nbsp;&nbsp;An Option to Eliminate Frames from
toc.htm<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
&lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;
&lt;!-- begin hide
if(parent.Body) {
   document.write(&quot;&lt;A HREF='&quot;);
        
   if(top.isNetscape()) {
      document.write(parent.Body.location.href);
   } else {
      document.write(parent.Body.location);
   }

   document.write(&quot;' TARGET='_main' &quot;);
   document.write(&quot;ONMOUSEOVER=\&quot;top.message(window, msg['noframes']);\&quot;&gt;No Frames&lt;/A&gt;&quot;);
}
// end hide --&gt;
&lt;/SCRIPT&gt;
</PRE>
</BLOCKQUOTE>
<HR>
<P>
This code block writes out a link that, when clicked, grabs the
URL currently loaded in <TT>Body</TT> and loads it into <TT>_main</TT>.
While this erases the visual subframes, all JavaScript code is
kept in memory because it's stored in the top-level file. This
makes it possible to continue to provide scripting support even
in non-frame mode.
<P>
Notice that this code block is wrapped with a test for <TT>parent.Body</TT>.
If frames have been turned off, then &quot;parent.Body&quot; is
equal to <TT>null</TT> (JavaScript's way of saying an object isn't
defined), and attempting to reference any properties of  &quot;Body&quot;
(such as the <TT>location</TT> object) generates an error. By
testing <TT>parent.Body</TT> first, you make your pages very dynamic-the
&quot;NoFrames&quot; hyperlink displays <I>only </I>if frames
are <I>on</I>. This same technique can also be used to display
a navigator bar at the bottom of an article page if frames have
been turned off, which will be demonstrated later in this chapter.
<P>
An additional check using <TT>isNetscape()</TT> resolves how to
access the <TT>location</TT> property. Under Navigator, <TT>location</TT>
is an object and you reference its <TT>href</TT> property to get
the URL of the document. Under Internet Explorer, <TT>location</TT>
is a simple property that you set directly. Under either browser,
trying to access &quot;location&quot; the wrong way generates
an error or sets the <TT>HREF</TT> attribute to a null value.
A null value results in another error when the link is clicked.
<P>
Finally, once frames are turned off, another method of navigation
through the eZine is required. Within the framework, this is handled
by displaying the familiar text-based navigation bar across the
bottom of the page. Because this bar is necessary only when running
in frameless mode, the HTML that displays the bar is wrapped in
more script code (listing 24.4).
<HR>
<BLOCKQUOTE>
<B>Listing 24.4&nbsp;&nbsp;A Frame-Sensitive Navigation Bar<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
&lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;
&lt;!-- begin hide
if(!parent.TOC) {
   document.write(&quot;&lt;HR&gt;&quot;);
   document.write(&quot;&lt;CENTER&gt;[ &quot;);

   document.write(&quot;&lt;A HREF='cover.htm' &quot;);
   document.write(&quot;ONMOUSEOVER=\&quot;top.message(window, msg['cover']);\&quot; &quot;);
   document.write(&quot;&gt;Coverpage&lt;/A&gt;&quot;);

   ...

   document.write(&quot; | &quot;);
   document.write(&quot;&lt;A HREF='index2.htm' &quot;);
   document.write(&quot;ONMOUSEOVER=\&quot;top.message(window, msg['frames']);\&quot; &quot;);
   document.write(&quot;&gt;Frames&lt;/A&gt;&quot;);

   document.write(&quot; ]&lt;/CENTER&gt;&quot;);
}
// end hide --&gt;
&lt;/SCRIPT&gt;
</PRE>
</BLOCKQUOTE>
<HR>
<P>
Using the same trick demonstrated in listing 24.3, the navigation
bar is wrapped with a &quot;are frames on?&quot; check-this time
for <TT>parent.TOC,</TT> the table of contents frame. If &quot;TOC&quot;
doesn't exist, the navigation bar is written to the document stream.
<P>
The last element of the navigation bar is a link to return to
framed mode. This is accomplished by reloading the frame control
file &quot;index2.htm&quot; back into <TT>_main</TT>. It's not
necessary to specify a <TT>TARGET</TT> attribute because this
link displays only when running in frameless mode; hence, all
pages are already being loaded into <TT>_main</TT>.
<P>
Copying this code block into each article file makes the entire
site capable of being browsed without frames and retains the scripting
functions so that status bar messages or anything else works properly.
Any additional scripting tricks that you want to make available
to frameless mode need only be wrapped with a check for &quot;parent.TOC.&quot;
Listing 24.5 places the eZines at the top of the cover page. It
normally is in the <TT>Title</TT> frame.
<HR>
<BLOCKQUOTE>
<B>Listing 24.5&nbsp;&nbsp;Displaying the eZine Title in Frameless
Mode<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
&lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;
&lt;!-- begin hide
if(!parent.TOC) {
   document.write(&quot;&lt;CENTER&gt;&quot;);
   document.write(&quot;   &lt;H2&gt;&quot;);
   document.write(&quot;      &lt;FONT COLOR=#0000F0&gt;&lt;I&gt;eZine's&lt;/I&gt;&lt;/FONT&gt;:&quot;);
   document.write(&quot;      Personal Online Publishing&lt;/H2&gt;&quot;);
   document.write(&quot;&lt;/CENTER&gt;&quot;);
   document.write(&quot;&lt;HR&gt;&quot;);
}
// end hide --&gt;
&lt;/SCRIPT&gt;
</PRE>
</BLOCKQUOTE>
<HR>
<P>
With the exception of allowing for one more scenario, the framework
structure is complete. This scenario is a totally frameless browser,
such as Mosaic.
<H2><A NAME="FramelessBrowsers"><FONT SIZE=5 COLOR=#FF0000>
Frameless Browsers</FONT></A></H2>
<P>
If you've done any surfing with a browser other than Navigator
or Internet Explorer that doesn't support frames or JavaScript,
you no doubt have encountered sites that display either a blank
page or a one- or two-line note that you need to upgrade your
browser before you can continue. While more and more of the online
community is surfing (compliments of Netscape and Microsoft),
there is still a sizeable chunk of surfers who choose to use another
program. With only a little more effort, the eZine framework extends
to permit these users to also enjoy your site, providing an interface
like the one shown in figure 24.4.
<P>
<A HREF="f24-4.gif"><B>Figure 24.4 :</B> <I>Browsing the eZine with a frameless browser,
like Mosaic, produces a look similar to browsing with Navigator
or Internet Explorer with frames turned off</I>.</A>
<P>
The first step is to include a <TT>&lt;NOFRAMES&gt;</TT> block
in the <TT>index.htm</TT> file. This contains the contents of
the <TT>&lt;BODY&gt;</TT> block from <TT>cover.htm</TT>. After
that, adding one more script block to each of the article files
creates the navigation bar (see listing 24.6).
<HR>
<BLOCKQUOTE>
<B>Listing 24.6&nbsp;&nbsp;A Navigation Bar for Browsers that
Doesn't Support Frames<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
&lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;
&lt;!-- --&gt;&lt;HR&gt;
&lt;!-- --&gt;&lt;CENTER&gt;[
&lt;!-- --&gt;&lt;A HREF=&quot;index.htm&quot;&gt;Coverpage&lt;/A&gt;
&lt;!-- --&gt; |
&lt;!-- --&gt;&lt;A HREF=&quot;story1.htm&quot;&gt;Story 1&lt;/A&gt;
&lt;!-- --&gt; |
&lt;!-- --&gt;&lt;A HREF=&quot;story2.htm&quot;&gt;Story 2&lt;/A&gt;
&lt;!-- --&gt; |
&lt;!-- --&gt;&lt;A HREF=&quot;story3.htm&quot;&gt;Story 3&lt;/A&gt;
&lt;!-- --&gt; |
&lt;!-- --&gt;&lt;A HREF=&quot;story4.htm&quot;&gt;Story 4&lt;/A&gt;
&lt;!-- --&gt; |
&lt;!-- --&gt;&lt;A HREF=&quot;story5.htm&quot;&gt;Story 5&lt;/A&gt;
&lt;!-- --&gt; ]&lt;/CENTER&gt;
&lt;/SCRIPT&gt;
</PRE>
</BLOCKQUOTE>
<HR>
<P>
This takes advantage of one other peculiarity in the JavaScript
interpreter. Any line within the <TT>&lt;SCRIPT&gt;</TT> tag that
starts with a comment tag pair (<TT>&lt;!-- --&gt;</TT>) will
be ignored by a JavaScript-enabled browser. It is treated as regular
HTML by any other browser. Effectively, this hides the raw HTML
from JavaScript-enabled browsers, and permits you to take this
code block and include it in each article file along with all
the other code blocks. Only one navigation bar displays. Which
bar depends on the browser and whether you're running in frame
or frameless mode.
<H2><A NAME="FromHere"><FONT SIZE=5 COLOR=#FF0000>
From Here&#133;</FONT></A></H2>
<P>
This chapter presents a framework for the creation of an eZine
using JavaScript as the primary scripting language. It also demonstrates
several tricks in design, including centralizing JavaScript source
code within a master frame. Having to maintain multiple script
blocks, support for various browser quirks, and support for frameless
browsers and browsing takes time. While this may seem like a great
deal of work, the end result is a comprehensive collection of
scripting tools that creates a site that can be enjoyed by anyone,
regardless of the browser used.
<P>
Because this is a framework, you can use many of the tricks and
scripts found in other chapters within this design, such as:
<UL>
<LI><A HREF="ch9.htm" >Chapter 9</A> &quot;Bulletin Boards,&quot; covers creating a
Web-based bulletin board and &quot;message threading.&quot;
<LI><A HREF="ch10.htm" >Chapter 10</A>, &quot;Implementing Web Chat,&quot; shows you how
to construct your own chat room with scripting.
<LI><A HREF="ch12.htm" >Chapter 12</A>, &quot;Guestbook/Graffiti Wall,&quot; explains
making a guest book database and a graffiti wall, where visitors
may leave messages.
<LI><A HREF="ch17.htm" >Chapter 17</A>, &quot;Creating Online Catalogs,&quot; looks at
the process of creating an online shopping mall complete with
a catalog of your wares.
</UL>
<HR>

<CENTER><P><A HREF="ch23.htm"><IMG SRC="pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="#CONTENTS"><IMG SRC="cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="index.htm"><IMG SRC="hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="ch25.htm"><IMG SRC="nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<HR WIDTH="100%"></P></CENTER>
</BODY>
</HTML>
