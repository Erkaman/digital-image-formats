<HTML>
<HEAD>
<TITLE>Chapter 2 -- Plug-In Identification</TITLE>

<META NAME="GENERATOR" CONTENT="Internet Assistant for Microsoft Word 2.0z">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT SIZE=6 COLOR=#FF0000>Chapter&nbsp;2</FONT></H1>
<H1><FONT SIZE=6 COLOR=#FF0000>Plug-In Identification</FONT></H1>
<HR>
<P>
<CENTER><B><FONT SIZE=5><A NAME="CONTENTS">CONTENTS</A></FONT></B></CENTER>
<UL>
<LI><A HREF="#ExtendingtheBrowser">
Extending the Browser</A>
<LI><A HREF="#IntroductiontoMIMETypes">
Introduction to MIME Types </A>
<LI><A HREF="#PlacingMultimediaObjectsTheIltEMCDDgtITag">
Placing Multimedia Objects- The <I>&lt;EMCDD&gt;</I> Tag</A>
<LI><A HREF="#EnhancingControlviaJavaScript">
Enhancing Control via JavaScript</A>
<LI><A HREF="#JavaScriptUnderNavigator">
JavaScript Under Navigator 3.0</A>
<LI><A HREF="#FromHere">
From Here&#133;</A>
</UL>

<HR>
<P>
The Web has always been a place of graphics and sound, but until
Netscape introduced the concept of a plug-in, you were limited
to static pictures, simple sounds, and the use of helper applications-even
if the online content got too fancy for the browser alone to handle.
<P>
Plug-ins require the installation of additional software that
takes advantage of the new technology. Without it, a page &quot;breaks,&quot;
displaying a &quot;cracked&quot; icon in place of your graphic
work.
<H2><A NAME="ExtendingtheBrowser"><FONT SIZE=5 COLOR=#FF0000>
Extending the Browser</FONT></A></H2>
<P>
<I>Plug-ins</I> and <I>helper applications</I> both view content
that the browser wasn't designed to handle. They both run the
same way-the browser checks each content object loaded against
a master list of what program can handle the particular object.
If a match is found, the corresponding plug-in or helper launches
to handle the object. At this point, however, the similarity ends.
<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><BLOCKQUOTE>
<B>An Object-Oriented Web?</B>
</BLOCKQUOTE>

</TD></TR>
<TR><TD><BLOCKQUOTE>
You'll encounter the term <I>object</I> often when dealing with the Web, and it bears a little explanation. As far as the Web is concerned, anything and everything that's included within an HTML page (graphics, hyperlinks, text, forms, multimedia files,<I> 

anything</I>) is considered an object.
</BLOCKQUOTE>
<BLOCKQUOTE>
For many of the common object types such as GIF, .JPG, and plain old HTML, the browser itself is considered a &quot;helper,&quot; with the program to handle that particular object built in. This makes it possible to reconfigure the browser and have even 
these common types handled by other programs.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
After helper applications launch, they run within their own windows
like regular programs. The user must then switch between the browser
window and the helper window as well as manually close the helper
down.
<P>
Plug-ins, however, run within the browser's client area and appear
to be part of the Web page. If there are any additional controls
(buttons, gauges, sliders, and so on) needed by the plug-in, they
become embedded in the Web page (see fig. 2.1).
<P>
<A HREF="f2-1.gif"><B>Figure 2.1 :</B> <I>A plug-in (such as ichat) takes total control
of the browser and reconfigures it as an entirely new program</I>.</A>
<H2><A NAME="IntroductiontoMIMETypes"><FONT SIZE=5 COLOR=#FF0000>
Introduction to MIME Types </FONT></A></H2>
<P>
In order for the Web server to properly transmit an embedded object,
it needs to know what <I>mime type</I> identifier to send to the
browser. Whenever a server sends an object, like an HTML file,
an image file, or a QuickTime movie, it's prefaced with a <I>header</I>
that contains information that informs the browser about the kind
of data that's going to arrive. MIME (<I>Multi-Purpose Internet
Mail Extensions</I>) is a freely available specification that
provides a way for computers to exchange:
<BLOCKQUOTE>
Text in different character sets<BR>
Graphics<BR>
Sound<BR>
Multimedia<BR>
Just about anything else
</BLOCKQUOTE>
<P>
A defined list of <I>mime types </I>accomplishes these tasks.
Additionally, the standard is <I>open-ended</I>, and additional
types can be defined by anyone. When two computers exchange information
(as in a Web session), MIME helps both sender (server) and receiver
(browser) figure out what to do with the data.
<P>
In order for this system to work properly, the server must know
the proper MIME type identifier to transmit to the browser. For
most commercial systems, the Web administrator handles this through
the server's configuration files. If this is not your case, specify
the MIME-type declaration locally within your own directories
by adding a type-identifier line to a configuration file. The
required name of this file is dependent on the configuration of
your server. It is often called <TT>.htaccess</TT> and is placed
in the same directory as your home page. You may need to contact
a Web administrator for further information. An example <TT>.htaccess</TT>
file is:
<BLOCKQUOTE>
<PRE>
Options All
AddType application/x-director .dcr
</PRE>
</BLOCKQUOTE>
<P>
This instructs the server to transmit any file ending with <TT>.dcr</TT>
to the browser with an <TT>application/x</TT>-<TT>director</TT>
MIME type, and instructs the browser to feed the file to Shockwave,
assuming it is installed.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>NOTE</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
The <TT>.htaccess</TT> file controls how the Web works for the directory and is located in all subdirectories. Because of this, you may have multiple <TT>.htaccess</TT> files in different directories. This can be beneficial when trying to control access to 

parts of your site. <A HREF="ch6.htm" >Chapter 6</A> &quot;Controlling User Access,&quot; covers this in more detail.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Each type of multimedia file has a different MIME type. To determine
what the correct type identifier is for a particular file, contact
your Web administrator or check out the home page of the company
that developed the plug-in or helper application.
<H2><A NAME="PlacingMultimediaObjectsTheIltEMCDDgtITag"><FONT SIZE=5 COLOR=#FF0000>
Placing Multimedia Objects- The <I>&lt;EMCDD&gt;</I> Tag</FONT></A></H2>
<P>
After configuring the server to deliver the files correctly, all
that's left is to inform the browser where to put the object (the
multimedia file) on the page. You can accomplish this with the
HTML <TT>&lt;EMBED&gt;</TT> tag:
<BLOCKQUOTE>
<PRE>
&lt;EMBED SRC=&quot;srcfile&quot; WIDTH=x HEIGHT=y&gt; 
</PRE>
</BLOCKQUOTE>
<P>
where:
<UL>
<LI><TT>SRC</TT>-identifies the source file.
<LI><TT>WIDTH</TT>-specifies the width of the display area (in
pixels).
<LI><TT>HEIGHT</TT>-specifies the height of the display area (in
pixels).
</UL>
<P>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><BLOCKQUOTE>
<B>CAUTION</B>
</BLOCKQUOTE>

</TD></TR>
<TR><TD><BLOCKQUOTE>
The values of the <TT>WIDTH</TT> and <TT>HEIGHT</TT> attributes include the size of the multimedia image as well as the space taken up by any controls the plug-in creates. The QuickTime plug-in, for example, adds a control bar at the bottom of the frame. 
Add the size of the control bar to the height of the movie. Depending on the plug-in, if the attributes are set too small, part of the displayed file may be clipped.
</BLOCKQUOTE>
<BLOCKQUOTE>
When designing pages that utilize plug-ins, remember to test the pages to make certain that any controls are also visible.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Browsers that can't handle the <TT>&lt;EMBED&gt;</TT> tag simply
ignore it and display nothing. To provide a viewing alternative
for these browsers, you can include a <TT>&lt;NOEMBED&gt;</TT>
tag block immediately after the <TT>&lt;EMBED&gt;</TT> tag:
<BLOCKQUOTE>
<PRE>
&lt;NOEMBED&gt;
   You really should get the plug-in ...
&lt;/NOEMBED&gt;
</PRE>
</BLOCKQUOTE>
<P>
Browsers that support embedding will ignore any <TT>&lt;NOEMBED&gt;</TT>
tag and its contents.
<H2><A NAME="EnhancingControlviaJavaScript"><FONT SIZE=5 COLOR=#FF0000>
Enhancing Control via JavaScript</FONT></A></H2>
<P>
Netscape Navigator 1.1N recognizes the <TT>&lt;EMBED&gt;</TT>
tag and treats it as an OLE link. This means that embedded objects
show up as a &quot;broken icon&quot; even if there is a defined
<TT>&lt;NOEMBED&gt;</TT> block. To make matters worse, Navigator
2.x and subsequent versions alert the user to the missing plug-in
(fig. 2.1) and ask for help.
<P>
<A HREF="f2-2.gif"><B>Figure 2.2 :</B> <I>If you attempt to download a QuickTime movie
without an installed plug-in, an alert dialog displays and requires
the user to select an external (helper application)</I>.</A><BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>NOTE</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
OLE stands for <I>Object Linking and Embedding</I>. It's the mechanism that permits users to take one kind of file, like a graphic or spreadsheet, and &quot;embed&quot; it within another type of file, like a word processing document.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Fortunately, Netscape 1.1N doesn't recognize JavaScript and makes
it possible to wrap the <TT>EMBED</TT> tag with script code. This
ensures that it's only interpreted by Navigator 2.0 or later because
Navigator 1.1N ignores everything within the body of the <TT>&lt;SCRIPT&gt;</TT>
tag. The resulting code block shows in listing 2.1:
<HR>
<BLOCKQUOTE>
<B>Listing 2.1&nbsp;&nbsp;Using JavaScript to Combat Netscape
1.1N<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
&lt;!-- Embed --&gt;
&lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;
&lt;!-- begin hide 
   document.write('&lt;EMBED SRC=&quot;sourcefile&quot; WIDTH=x HEIGHT=y&gt;');
// end hide --&gt;
&lt;/SCRIPT&gt;

&lt;NOEMBED&gt;
   &lt;!-- provide a visual placeholder for EMBED-less browsers --&gt;
   &lt;IMG SRC=&quot;imagefile&quot; WIDTH=x HEIGHT=y&gt;
&lt;/NOEMBED&gt;
</PRE>
</BLOCKQUOTE>
<HR>
<P>
If the WIDTH and HEIGHT attributes of <TT>imagefile</TT> match
those of <TT>srcfile</TT>, the placeholder graphic occupies the
same space and position of the missing embedded object while keeping
your screen layout constant. There are a couple of caveats to
this technique:
<OL>
<LI>If someone is using Navigator 2.0 but does not have the plug-in
that handles the specified file installed, a &quot;broken&quot;
icon displays.
<LI>For many plug-ins, the WIDTH and HEIGHT attributes must be
specified for the <TT>&lt;EMBED&gt;</TT> tag. Navigator crashes
if you fail to do this. Indicating these attributes decreases
the load time for your page by reducing the amount of Navigator
computation.
</OL>
<H2><A NAME="JavaScriptUnderNavigator"><FONT SIZE=5 COLOR=#FF0000>
JavaScript Under Navigator 3.0</FONT></A></H2>
<P>
With the release of Navigator 3.0, JavaScript has been extended
in several ways. One extension is the addition of a <TT>plugins[]</TT>
array to the navigator object. The <TT>plugins[]</TT> array is
a complete list of plug-ins currently installed in the browser
that were identified by the length property. Within the array,
each element has a name property, which is a string holding the
name of the plug-in. This makes it possible to determine whether
a particular plug-in is installed simply by scanning the array.
An example of a JavaScript code fragment that searches for the
Shockwave plug-in is indicated in listing 2.2.
<HR>
<BLOCKQUOTE>
<B>Listing 2.2&nbsp;&nbsp;Identifying the Presence of a Plug-In
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
var nplug = navigator.plugins.length;
var i = 0;

while (i &lt; nplug) {
   if (navigator.plugins[i].name.indexOf('Shockwave') != &nbsp;&nbsp;1) {
      shock = 1;
   }

   i++;
}
</PRE>
</BLOCKQUOTE>
<HR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>NOTE</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
A sample document that displays all of a browser's installed plug-ins is included on the CD.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The <TT>plugins[]</TT> property is only supported by Navigator
3, and as Internet Explorer or earlier versions of Navigator support
it, it's necessary to check if Navigator is being run. If so,
what version is it? This is done by scanning the <TT>appVersion</TT>
property of the navigator object for the string <B>2</B>. (that's
a <TT>2</TT> followed by a period). By specifying the decimal
point, you prevent possibly matching 1.2, 3.2, or some other browser
version you're not interested in. By checking the navigator object's
<TT>appName</TT> property for the presence of Netscape, you determine
whether Navigator or Explorer is being used.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>NOTE</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
The JavaScript navigator object is a very handy component because it permits you to do very specific page configurations. These configurations were once restricted to CGI scripting. Because of this, you'll see <I>navigator</I> appear throughout the book, 
whenever client-side scripting involves browser-specific functions.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Pulling this all together, listing 2.3 gives you a generic function
that identifies whether a given plug-in is installed. If running
Navigator 3.0, it searches for the plug-in. If running Navigator
2.0 or Internet Explorer 3.0, it assumes the plug-in is installed.
If running anything else, it assumes the plug-in is not installed.
<HR>
<BLOCKQUOTE>
<B>Listing 2.3&nbsp;&nbsp;A Generic Plug-In Checker<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
&lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;
&lt;!-- begin hide
function isPluginInstalled(strPlugin) {
   var fInstalled = false;

   if((navigator.appVersion.lastIndexOf('3.') != -1) &amp;&amp; 
      (navigator.appName.indexOf('Netscape') != -1) {
      var nplug = navigator.plugins.length;
      var i = 0;

      while (i &lt; nplug) {
         if (navigator.plugins[i].name.indexOf(strPlugin) != -1) {
            fInstalled = true;
         }

         i++;
      }
   } 
   else
   if((navigator.appVersion.lastIndexOf('2.') != -1) ||
      (navigator.appName.indexOf('Microsoft') != -1) {
      fInstalled = true;
   }

   return fInstalled;
}
// end hide --&gt;
&lt;/SCRIPT&gt;
</PRE>
</BLOCKQUOTE>
<HR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>NOTE</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
The decision to assume the installation of a plug-in under Internet Explorer is purely arbitrary. You can always choose to assume that an Explorer user has no plug-ins and was made in anticipation of both the future support of the <TT>plugin[]</TT> 
property by Explorer and the growing number of plug-ins that are becoming available for Microsoft's browser.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
With this little tool, you can customize your pages to display
as cleanly (no &quot;broken icons&quot; or irritating &quot;you
need a plug-in&quot; messages) as possible, regardless of whether
a plug-in is installed or not. A code fragment that uses the <TT>isPluginInstalled()</TT>
function to embed a Shockwave file is demonstrated in listing
2.4:
<HR>
<BLOCKQUOTE>
<B>Listing 2.4&nbsp;&nbsp;Testing for the Presence of Shockwave
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
&lt;!-- Embed a Shockwave for Director file --&gt;
&lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;
&lt;!-- begin hide
   if(isPluginInstalled('Shockwave')) {
      document.write('&lt;EMBED SRC=&quot;myshock.dcr&quot; WIDTH=100 HEIGHT=50&gt;');
   } else {
      document.write('&lt;IMG SRC=&quot;noshock.gif&quot; WIDTH=100 HEIGHT=50&gt;');
   }
// end hide --&gt;
&lt;/SCRIPT&gt;

&lt;NOEMBED&gt;
   &lt;!-- provide a visual placeholder for EMBED-less browsers --&gt;
   &lt;IMG SRC=&quot;noshock.gif&quot; WIDTH=100 HEIGHT=50&gt;
&lt;/NOEMBED&gt;
</PRE>
</BLOCKQUOTE>
<HR>
<P>
Remember that the <TT>IMG</TT> placeholder needs to be included
twice-once for browsers that are JavaScript-enabled but don't
have the plug-in (or that can't determine whether it's installed),
and once for older browsers that support neither EMBED nor JavaScript.
<H2><A NAME="FromHere"><FONT SIZE=5 COLOR=#FF0000>
From Here&#133;</FONT></A></H2>
<P>
This chapter examines the different methods used to identify plug-ins
installed on a user's browser and gives suggestions for accommodating
different browsers.
<UL>
<LI><A HREF="ch1.htm" >Chapter 1</A> &quot;Browser Identification,&quot; explains the
auto-load method. You can use this method to jump the users to
a configuration page that allows them to easily download and install
any plug-ins they may need.
</UL>
<HR>

<CENTER><P><A HREF="ch1.htm"><IMG SRC="pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="#CONTENTS"><IMG SRC="cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="index.htm"><IMG SRC="hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="ch3.htm"><IMG SRC="nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<HR WIDTH="100%"></P></CENTER>
</BODY>
</HTML>
