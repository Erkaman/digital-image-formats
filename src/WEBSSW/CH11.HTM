<HTML>
<HEAD>
<TITLE>Chapter 11 -- Implementing Keyword Searches</TITLE>

<META NAME="GENERATOR" CONTENT="Internet Assistant for Microsoft Word 2.0z">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT SIZE=6 COLOR=#FF0000>Chapter&nbsp;11</FONT></H1>
<H1><FONT SIZE=6 COLOR=#FF0000>Implementing Keyword Searches</FONT>
</H1>
<HR>
<P>
<CENTER><B><FONT SIZE=5><A NAME="CONTENTS">CONTENTS</A></FONT></B></CENTER>
<UL>
<LI><A HREF="#HowMuchIsEnough">
How Much Is Enough?</A>
<LI><A HREF="#freeWAIS">
freeWAIS</A>
<LI><A HREF="#SWISH">
SWISH</A>
<LI><A HREF="#UsingCGIstoFormattheOutput">
Using CGIs to Format the Output</A>
<LI><A HREF="#CustomizingtheSearchResults">
Customizing the Search Results</A>
<LI><A HREF="#NotRunningUNIX">
Not Running UNIX?</A>
<UL>
<LI><A HREF="#Macintosh">
Macintosh</A>
<LI><A HREF="#Windows">
Windows</A>
</UL>
<LI><A HREF="#FromHere">
From Here&#133;</A>
</UL>

<HR>
<P>
Bigger isn't necessarily better. One of the latest crazes in the
retail market is the &quot;mega mall&quot; or &quot;super store.&quot;
Take a regular shopping mall (or normal retail store) and increase
its size by an exponential degree. Your purchase choices increase
dramatically, assuming that you can find what you're looking for.
This is why it's pretty common to see a sizable crowd of people
huddled around the information kiosks interspersed about these
massive establishments. If it wasn't for a map, index, or guidebook
of some sort, nobody could find <I>anything </I>and probably wouldn't
come back.
<P>
Web sites aren't much different. As a site starts to grow, it
becomes increasingly difficult to locate just what you surfed
in for. While shopping malls have maps, Web sites have <I>search
engines</I>-central query pages where you can ask for directions.
<H2><A NAME="HowMuchIsEnough"><FONT SIZE=5 COLOR=#FF0000>
How Much Is Enough?</FONT></A></H2>
<P>
As a Web site grows larger in size and complexity, it reaches
a point where having a means to easily locate information within
the myriad pages is not only nice, it's necessary. Whether it's
for your own benefit as the site's administrator, because even
the best administrators can get lost in the documents, or that
of the general Web community if you're running an online store,
for example, the first step in preparing your site for indexing
is to determine what parts of your site you want to include in
the search.
<P>
For example, indexing graphics may not be necessary for your site
if the only purpose they serve is a pleasing visual presentation.
On the other hand, if you are maintaining a large catalog of items,
each with its own graphic, adding the images to the index may
be beneficial. A general rule of thumb: <I>let your content decide
your index.</I>
<P>
In order to deliver the results of a query as quickly as possible,
indexing programs rely heavily on an <I>index file</I> that contains
all the important associations between various keywords and the
documents that make up your site. Because these index files are
generated by programs that search the entire contents of a Web
site, you must also decide how often you need to generate an updated
index file. For those managing a handful of pages, updating the
index each time you make changes is feasible.
<P>
However, if you manage a large site or a server that multi-hosts
several different sites whose pages are in constant flux from
various sources, you should consider automating your indexing
process. If it happens regularly (say, once a week) and at a time
when you know the site activity is minimal, the processing time
used by the indexing software won't slow down the server response
for your users.
<P>
Finally, you need to take a look at how much material you wish
to include in the index, especially the size of the resulting
index file. It's common for the size of an index file to far exceed
the size of the data it indexes. If your site is rather large,
it may be beneficial to break the index up into smaller indexes,
with each covering a different directory tree, for instance. Even
so, it's still necessary to build a <I>master index</I> or a collection
of related indexes covering every possible term that your users
could search for within your pages.
<P>
There are several different ways to decide what's worth indexing
and what's worth ignoring, such as:
<UL>
<LI>Utilize your site's Web statistics to identify what sections
of the site are the most heavily traveled. Depending on the content
of your site, this information may indicate a need to index the
heavily traveled areas (for easier access) <I>or</I> the lighter
ones (perhaps they aren't easy to find).
<LI>Take advantage of user questionnaires and ask the people browsing
what they like, don't like, would like to see changed, or can't
find.
<LI>Spend some time on a regular basis surfing the site yourself.
In many cases, your own intuition will be an excellent guide.
</UL>
<P>
The bottom line is that it's ultimately up to the site administrator-you-to
decide what and what not to index. If all else fails, you can
always fall back on the general rule: <I>If you have the space
and the processor time, index everything and index often</I>.
<P>
Because indexing is such a common feature on the Web, there are
already several freeware, shareware, or commercial programs out
there that do the bulk of the work for you. Rather than diving
deeply into the heuristics of building search indexes, the following
pages take a look at three of the more popular index managers:
<I>freeWAIS</I>, <I>SWISH</I>, and <I>WWWWAIS</I>.
<H2><A NAME="freeWAIS"><FONT SIZE=5 COLOR=#FF0000>
freeWAIS</FONT></A></H2>
<P>
The WAIS (<I>Wide Area Information System</I>) project is an experiment
automating the search and retrieval of many types of electronic
information over wide area networks, such as the Internet. <I>freeWAIS</I>,
developed by the Center for Networked Information Discovery and
Retrieval (<B><A HREF="http://www.cnidr.org/">http://www.cnidr.org/</A></B>), is a simple implementation
of the WAIS database system.
<P>
Like most software for UNIX platforms, freeWAIS must be compiled
before you can implement it on your system (you'll find a copy
of the distribution on the companion CD-ROM). Once installed,
it sits in the background until you've finished determining which
directories you want to include in the index.
<P>
One simple method of setting up your directories for indexing
is to create a directory containing symbolic links for all the
directories you want to index. Once the associated links have
been created, you can easily index all or part of the directory
containing them, without having to reconfigure the Web site itself.
<P>
The actual indexing process is handled by <I>waisindex</I>, the
application that you use for this purpose, located in the same
directory as your other WAIS tools. To generate the index, you
can use a command line similar to:
<BLOCKQUOTE>
<PRE>
/wais/waisindex -l 1 -e /dev/null -d */wais/WEB/pointers
-r -mem 6 /wais/pointers
</PRE>
</BLOCKQUOTE>
<P>
that runs waisindex with the following parameters:
<BLOCKQUOTE>
<TT>-l 1</TT>-Controls the verbosity of the created log (you may
wish to experiment with this to get a better feel for how much
information is generated).
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>-e /dev/null</TT>-Routes any error messages off to the trash.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>-d */wais/WEB/pointers</TT>-Specifies the directory to start
the indexing process in.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>-r</TT>-Forces subdirectory recursion, allowing waisIndex
to search entire trees.
</BLOCKQUOTE>
<P>
After the index file is created, you can test the search capabilities
using <I>waisq</I>. For example:
<BLOCKQUOTE>
<PRE>
/wais/waisq -m 100 -c /wais/ -f -S users.src -g Scott Walter
</PRE>
</BLOCKQUOTE>
<P>
searches the index <TT>users.src</TT> for the home page of <TT>Scott
Walter</TT>. The result returned by <I>waisq</I> will indicate
how many matches are found and the matches themselves. This is
the information that you'll need to evaluate when writing the
CGI scripts to display the results of a user's search.
<H2><A NAME="SWISH"><FONT SIZE=5 COLOR=#FF0000>
SWISH</FONT></A></H2>
<P>
Another indexing tool commonly used is <I>SWISH</I>, which you'll
also find on the companion CD-ROM. Unlike WAIS systems, SWISH
(<I>Simple Web Indexing System for Humans</I>)<I> </I>is, as the
name implies, simple to set up and use. It's an ideal first choice
for creating indexes of small sites, especially if all you want
is a search engine for Web-related data, as WAIS can index <I>anything</I>.
<P>
Because SWISH is designed as a simple implementation of indexing,
it's not necessarily for everybody. If you're interested in implementing
a more robust index interface, you'd probably be better off with
WAIS. However, if you want &quot;quick and dirty,&quot; then SWISH
is an excellent choice.
<H2><A NAME="UsingCGIstoFormattheOutput"><FONT SIZE=5 COLOR=#FF0000>
Using CGIs to Format the Output</FONT></A></H2>
<P>
Once you create your indexes, process a query, and get back the
search results, you need to process the returned data into a form
that's palatable to the Web server. One of the best programs available
that does this for you is <I>wwwwais</I>, an elegant program written
in C that serves as a &quot;gatekeeper&quot; between the Web and
a WAIS or SWISH system.
<P>
To use WWWWAIS, you first configure the program to support the
WAIS database you indexed (created) earlier. This usually involves
changing one line in the source code to point to the location
of an external configuration file, then compiling. Once compiled,
any further configuration can be made by editing the configuration
file.
<P>
This defines the location of the file that WWWWAIS uses for all
of its on-the-fly configuration. Once the application program
is built, you will never need to edit the source code, so all
changes to your WWW environment can be handled gracefully by editing
the &quot;wwwwais.conf&quot; file that you specified in the program.
<H2><A NAME="CustomizingtheSearchResults"><FONT SIZE=5 COLOR=#FF0000>
Customizing the Search Results</FONT></A></H2>
<P>
Once a search is complete, the final task is to handle the resulting
output. If you don't have the time or patience to write a Perl
script to customize the output for either a WAISQ or SWISH search,
WWWWAIS offers a perfect solution-a built-in forms generator capable
of recursively calling itself. Using its own output-formatting
capabilities saves you the time necessary to write (and debug)
your own. 
<P>
However, the resulting output is somewhat generic, so if you need
a particular &quot;look&quot;-perhaps due to corporate specifications
or you simply desire your own style, you've little alternative
but to start rolling your own script. However, if you look at
the default data format presented by the search engine, you will
probably discover that &quot;tweaking&quot; it to suit your needs
is not very difficult.
<H2><A NAME="NotRunningUNIX"><FONT SIZE=5 COLOR=#FF0000>
Not Running UNIX?</FONT></A></H2>
<P>
While the previous programs are UNIX-based, Web masters running
servers on other operating systems can still implement indexes
within their sites.
<H3><A NAME="Macintosh">
Macintosh</A></H3>
<P>
For the Macintosh, <I>Global HTTP Contents 1.0</I>, written in
AppleScript, generates an HTML-formatted document containing a
hierarchical list of a folder's contents and all its subfolders.
Here's where you can check it out:
<P>
<B><A HREF="http://arpp1.carleton.ca/machttp/util/global/">http://arpp1.carleton.ca/machttp/util/global/</A></B>.
<H3><A NAME="Windows">
Windows</A></H3>
<P>
More and more servers are running under Windows, whether it's
NT, 95, or even 3.1. For Web sites working within Microsoft's
operating systems, one Web server in particular has indexing already
built in: <B>WebSite</B> from O'Reilly and Associates (<B><A HREF="http://website.ora.com/">http://website.ora.com/</A></B>).
WebSite also provides an easy-to-use, graphical interface for
maintaining the various facets of the site.
<P>
For those looking for an index engine to implement in an existing
site, <B>Excite</B> has versions available for Windows, which
you'll find on the companion CD-ROM. By design, Excite is easy
to install, easy to maintain, and very fast when it comes to query
processing.
<P>
Microsoft has also joined the index engine world with the release
of its Index Server (code named <I>Tripoli</I>) for Windows NT
Server 4.0 (<B><A HREF="http://www.microsoft.com/ntserver/">http://www.microsoft.com/ntserver/</A></B>). Because
of the tight coupling between the Index Server and the operating
system itself, Tripoli is relatively simple to configure and quickly
indexes the entire contents of your site. Visitors to your site
can also take advantage of the built-in multilingual features,
and search your site in one of seven different languages.
<H2><A NAME="FromHere"><FONT SIZE=5 COLOR=#FF0000>
From Here&#133;</FONT></A></H2>
<P>
This chapter was a brief overview of the tools available to add
indexing to your site. If you want to explore the process of indexing
and its uses in greater detail, you may want to check out:
<UL>
<LI><A HREF="ch21.htm" >Chapter 21</A>, &quot;Calendar of Events,&quot; for indexing into
a database of dates
<LI><A HREF="ch23.htm" >Chapter 23</A>, &quot;Search Engine Front-End,&quot; for integrating
the large search engines available around the Internet.
</UL>
<HR>

<CENTER><P><A HREF="ch10.htm"><IMG SRC="pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="#CONTENTS"><IMG SRC="cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="index.htm"><IMG SRC="hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="ch12.htm"><IMG SRC="nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<HR WIDTH="100%"></P></CENTER>
</BODY>
</HTML>
