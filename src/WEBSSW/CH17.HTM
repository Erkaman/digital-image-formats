<HTML>
<HEAD>
<TITLE>Chapter 17 -- Creating Online Catalogs</TITLE>

<META NAME="GENERATOR" CONTENT="Internet Assistant for Microsoft Word 2.0z">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT SIZE=6 COLOR=#FF0000>Chapter&nbsp;17</FONT></H1>
<H1><FONT SIZE=6 COLOR=#FF0000>Creating Online Catalogs</FONT>
</H1>
<HR>
<P>
<CENTER><B><FONT SIZE=5><A NAME="CONTENTS">CONTENTS</A></FONT></B></CENTER>
<UL>
<LI><A HREF="#BasicPresentationStructure">
Basic Presentation Structure</A>
<LI><A HREF="#RequiredComponents">
Required Components</A>
<LI><A HREF="#FromHere">
From Here&#133;</A>
</UL>

<HR>
<P>
As the commerce potential of the Web increases, a new business
venture is starting to appear-the CyberMall. Through the comfort
of your browser, you can surf the world, shopping in places you
had never dreamed existed.
<H2><A NAME="BasicPresentationStructure"><FONT SIZE=5 COLOR=#FF0000>
Basic Presentation Structure</FONT></A></H2>
<P>
One of the toughest tasks in maintaining an online catalog is
the frequent change in the products for sale and their prices.
While this can be handled by constantly updating the HTML documents
that display the products, another method is to utilize Perl to
dynamically create a catalog &quot;page,&quot; loading information
from a server-side dataset.<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>TIP</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
The variety of different implementations of online catalogs and online stores is almost as numerous as the number of Web sites on the Internet in general-no two are quite alike. One interesting online catalog/shopping mall that's worth perusing is the 
Haddonfield Gourmet at <B><A HREF="http://www.haddonfield.com/haddonfieldgourmet/">http://www.haddonfield.com/haddonfieldgourmet/</A></B>.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H2><A NAME="RequiredComponents"><FONT SIZE=5 COLOR=#FF0000>
Required Components</FONT></A></H2>
<P>
For each product, you need (at least) four components:
<OL>
<LI>A graphic of the product.
<LI>A description of the product.
<LI>The product's price.
<LI>An order code-the method of identifying the product within
your warehouse. If the number of products you offer is small,
you may want to dispense with the code and rely on the product
description.
</OL>
<P>
Using a derivative of the advertising database demonstrated in
chapter 8, &quot;Advertising with Billboards,&quot; creating a
database of products for sale is a snap. As before, using a flat-file
format makes the structure easy to read and maintain. For example,
a database of entries could look something like this:
<BLOCKQUOTE>
<PRE>
coat.gif|Winter Coat|49.99|WC101
parka.gif|Down Parka|75.00|PK155
gloves.gif|Fur-lined gloves|19.99|GL354<BR>
</PRE>
</BLOCKQUOTE>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>NOTE</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
You could also implement the database within the browser as a JavaScript array. Doing this would have the additional benefit of allowing fast searches throughout the catalog. You'll find a JavaScript version of the catalog databasing system on the 
companion CD-ROM</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Loading the database into memory for processing is handled by
the standard Perl fragment, as demonstrated in listing 17.1.
<HR>
<BLOCKQUOTE>
<B>Listing 17.1&nbsp;&nbsp;Loading the Catalog<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
open (CATALOG, 'catalog.dat');

while (&lt;CATALOG&gt;) {
   ($image, $desc, $price, $code) = split (/\|/, $-);
   chop $code;
   push (@images       , $image);
   push (@descriptions , $desc);
   push (@prices       , $price);
   push (@codes        , $code);
}

close (CATALOG);
</PRE>
</BLOCKQUOTE>
<HR>
<P>
Once the catalog is loaded, simply select an item to display and
generate a page that contains your information (see listing 17.2).
<HR>
<BLOCKQUOTE>
<B>Listing 17.2&nbsp;&nbsp;Creating a Catalog Page<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
# $which is the index to the product to display
#
print &quot;Content-type: text/html\n\n&quot;;
print &quot;&lt;HTML&gt;\n&quot;;
print &quot;&lt;HEAD&gt;&lt;TITLE&gt;Catalog Item $codes[$which]&lt;/TITLE&gt;&lt;/HEAD&gt;\n&quot;;
print &quot;&lt;BODY&gt;&lt;CENTER&gt;\n&quot;;
print &quot;&lt;IMG SRC=\&quot;$images[$which]\&quot;&gt;&lt;BR&gt;\n&quot;;
print &quot;$descriptions[$which] - $prices[$which]\n&quot;;
print &quot;&lt;/CENTER&gt;&lt;/BODY&gt;&lt;/HTML&gt;\n&quot;;
</PRE>
</BLOCKQUOTE>
<HR>
<P>
Although the actual creation and display of the page is simple,
two questions should come to mind:
<OL>
<LI>How do you know which pages you have shown the user?
<LI>How do you specify the <I>next</I> or <I>previous</I> pages?
</OL>
<P>
This is easily handled by the addition of a simple form to the
page, with a next page advance button, and a hidden field that
holds the current page number.<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>NOTE</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
You could use the product code as an index, then search the database for the code and move to the next or previous record. However, if the catalog is large and not sorted or indexed by a product code, finding a particular item will take a bit of 
time.</BLOCKQUOTE>
<BLOCKQUOTE>
More examples on product searching are covered in chapter 18, &quot;Online Store Product Searches.&quot;</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
In other words, adding the code fragment shown in listing 17.3
to the HTML generation block from listing 17.2 does the trick.
<HR>
<BLOCKQUOTE>
<B>Listing 17.3&nbsp;&nbsp;Navigating the Catalog<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
print &quot;&lt;FORM METHOD=POST ACTION=\&quot;/cgi-bin/catalog.pl\&quot;&gt;\n&quot;;
print &quot;&lt;INPUT TYPE=SUBMIT VALUE=\&quot;Next\&quot;&gt;\n&quot;;
$which++;
print &quot;&lt;INPUT TYPE=HIDDEN NAME=\&quot;page\&quot; VALUE=\&quot;$which\&quot;&gt;\n&quot;;
print &quot;&lt;/FORM&gt;\n&quot;;
</PRE>
</BLOCKQUOTE>
<HR>
<P>
Notice the actual page number passed is the <I>next</I> page to
load. From this fragment, when the catalog script is run, it first
pulls the value for <TT>$which</TT> from the values passed in
with the form data, as demonstrated in listing 17.4.
<HR>
<BLOCKQUOTE>
<B>Listing 17.4&nbsp;&nbsp;Determining the Current Page<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
read(STDIN, $buffer, $ENV{'CONTENT_LENGTH'});
@pairs = split(/&amp;/, $buffer);

foreach $pair (@pairs) {
   ($name, $value) = split(/=/, $pair, 2);
   $value =~ tr/+/ /;
   $value =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack(&quot;C&quot;, hex($1))/eg;
   $contents{$name} = $value;
}

$which = $contents{'page'};

if(!$which) {
   $which = 0;
}
...
</PRE>
</BLOCKQUOTE>
<HR>
<P>
The last &quot;if&quot; block is necessary to address the case
where the user first enters the  catalog-there is no &quot;current&quot;
page. Because the catalog script is activated from something other
than the form it creates, such as clicking a link to enter the
catalog, there is no form data and the value of <TT>$contents{'page'}</TT>
will be &quot;null&quot; (or empty). In this case, forcing it
to zero starts you at the first page of the catalog.
<P>
The last item to tackle is what to do when the user has reached
the end of the catalog-no more pages. Modifying the script fragment
from listing 17.3 as follows:
<BLOCKQUOTE>
<PRE>
$numItems = @codes;
if ($which &lt; $numItems) {
   print &quot;&lt;INPUT TYPE=SUBMIT VALUE=\&quot;Next\&quot;&gt;\n&quot;;
}
</PRE>
</BLOCKQUOTE>
<P>
will only display a <TT>Next</TT> button when there are more pages
to display.
<H2><A NAME="FromHere"><FONT SIZE=5 COLOR=#FF0000>
From Here&#133;</FONT></A></H2>
<P>
This chapter introduces a simple catalog framework that can easily
work for an art gallery, an &quot;online book,&quot; or anything
that requires sequencing through a selection of pages, instead
of creating individual HTML documents. To expand on these tricks,
check out:
<UL>
<LI><A HREF="ch18.htm" >Chapter 18</A>, &quot;Online Store Product Searches,&quot; discusses
Internet monetary transactions.
<LI><A HREF="ch19.htm" >Chapter 19</A>, &quot;Shopping Cart,&quot; shows you how to store
a customer's product information.
<LI><A HREF="ch20.htm" >Chapter 20</A>, &quot;Online Ordering,&quot; covers different
search techniques.
</UL>
<HR>

<CENTER><P><A HREF="ch16.htm"><IMG SRC="pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="#CONTENTS"><IMG SRC="cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="index.htm"><IMG SRC="hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="ch18.htm"><IMG SRC="nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<HR WIDTH="100%"></P></CENTER>
</BODY>
</HTML>
