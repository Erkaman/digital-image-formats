<HTML>
<HEAD>
<TITLE>Chapter 12 -- Guestbook/Graffiti Wall</TITLE>

<META NAME="GENERATOR" CONTENT="Internet Assistant for Microsoft Word 2.0z">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT SIZE=6 COLOR=#FF0000>Chapter&nbsp;12</FONT></H1>
<H1><FONT SIZE=6 COLOR=#FF0000>Guestbook/Graffiti Wall</FONT>
</H1>
<HR>
<P>
<CENTER><B><FONT SIZE=5><A NAME="CONTENTS">CONTENTS</A></FONT></B></CENTER>
<UL>
<LI><A HREF="#Guestbooks">
Guestbooks</A>
<UL>
<LI><A HREF="#TheGuestbookDatabase">
The Guestbook Database</A>
<LI><A HREF="#DisplayingtheGuestbook">
Displaying the Guestbook</A>
<LI><A HREF="#PleaseSignIn">
Please Sign In&#133;</A>
</UL>
<LI><A HREF="#AGraffitiWall">
A Graffiti Wall</A>
<LI><A HREF="#AJavaScriptGuestbook">
A JavaScript Guestbook?</A>
<LI><A HREF="#FromHere">
From Here&#133;</A>
</UL>

<HR>
<P>
Some people prefer to surf the Web in anonymity. They like to
move from site to site, page to page, reading all the information
available. They peruse the bulletin boards, maybe even listen
in on the chat forums, but never actively participate in a discussion.
In Cyberspace, the term for such individuals is <I>lurkers, </I>as
they tend to haunt the recesses of the Internet as shadows in
the background.
<P>
Other folks dive into the middle of the fray, proudly and loudly,
proclaiming their position to anyone who cares to listen and even
some who don't. These are the kinds of surfers who like to leave
a message for the rest of the Web community. Something that says,
&quot;I've been here, and, while I'm at it, this is what I think&#133;.&quot;
For such individuals, creating a place on your site where they
can make their personal comments part of the culture of the Web
is an added feature that will be appreciated.
<H2><A NAME="Guestbooks"><FONT SIZE=5 COLOR=#FF0000>
Guestbooks</FONT></A></H2>
<P>
The principle behind a guestbook is simple:
<UL>
<LI>Keep a database of visitors to your site.
<LI>Provide a means to display the database to the curious.
<LI>Provide a means for a visitor to sign in, adding his/her name
to the list.
</UL>
<H3><A NAME="TheGuestbookDatabase">
The Guestbook Database</A></H3>
<P>
Guestbooks are databases of information, much like the billboard
database discussed in chapter 8, &quot;Advertising with Billboards.&quot;
As a refresher, the billboard database is a simple, flat file
on the server having one advertiser entry, which is called a <I>record,</I>
per line. There are two fields within each record: the URL of
the graphic to display and the URL of the advertiser's site. Individual
fields are separated by a delimiter character that is a printable
character that's not present within the information in any field,
as in
<BLOCKQUOTE>
<PRE>
eff_gry_lg.gif|http://www.eff.org/
cigjs.gif|http://www.visi.com/~sjwalter/javascript/
</PRE>
</BLOCKQUOTE>
<P>
This same system can be used for a guestbook; all that's needed
is to redefine the fields. For example, a simple guestbook could
contain the following information for each entry:
<UL>
<LI>The user's real name
<LI>The user's e-mail address
<LI>The URL of the user's Web site
</UL>
<P>
Using the same delimiter as before, it would produce records such
as this:
<BLOCKQUOTE>
<PRE>
Scott J. Walter|sjwalter@visi.com|http://www.visi.com/~sjwalter/
</PRE>
</BLOCKQUOTE>
<P>
To parse the database into memory for processing into HTML, a
Perl loop similar to the one shown in listing 12.1 can be used.
<HR>
<BLOCKQUOTE>
<B>Listing 12.1&nbsp;&nbsp;Parsing the Guestbook<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
open (GUESTBOOK, 'guestbook.dat');

while (&lt;GUESTBOOK&gt;) {
   chop; # hack off the newline character

   ($name, $email, $url) = split (/\|/);

   push (@Names  , $name);
   push (@Emails , $email);
   push (@URLs   , $url);
}

close (GUESTBOOK);
</PRE>
</BLOCKQUOTE>
<HR>
<H3><A NAME="DisplayingtheGuestbook">
Displaying the Guestbook</A></H3>
<P>
With the guestbook entries loaded into memory, you are ready to
generate the HTML document to display them. To add a little flair
to the resulting document, use the <I>tokenized HTML</I> trick
from chapter 8, and define an HTML comment line as the placeholder
for the guestbook entries within the document. However, this requires
that you wrap the HTML file with a call to the CGI script by specifying
the Perl script as your link:
<BLOCKQUOTE>
<PRE>
Look at the &lt;A HREF=&quot;/cgi-bin/guestbook.pl&quot;&gt;GuestBook&lt;/A&gt;
</PRE>
</BLOCKQUOTE>
<P>
A different approach is to use server-side includes, and call
the guestbook script from <I>within</I> the HTML file. Listing
12.2 demonstrates this technique.<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>TIP</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
<I>Server-side includes</I> were first introduced in chapter 1, &quot;Browser Identification.&quot;
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 12.2&nbsp;&nbsp;guestbook.html-Guestbook Display File
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
&lt;HTML&gt;
&lt;HEAD&gt;
   &lt;TITLE&gt;Guestbook&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;CENTER&gt;&lt;H1&gt;Guestbook&lt;/H1&gt;&lt;/CENTER&gt;

&lt;HR&gt;

Curious about who else has stopped by?  Here's a list of other
surfers who've visited these pages.

&lt;HR&gt;

&lt;!-- the following line calls the guestbook script --&gt;
&lt;!--#exec cgi=&quot;/cgi-bin/guestbook.pl&quot;--&gt;

&lt;HR&gt;
Care to leave your mark here as well?  If so, please
&lt;A HREF=&quot;signin.html&quot;&gt;sign the guestbook&lt;/A&gt; yourself!

&lt;A HREF=&quot;/index.html&quot;&gt;Back to My Home Page&lt;/A&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
</BLOCKQUOTE>
<HR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>CAUTION</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
If you're not running your own Web server, it's a good idea to check with the site administrator to make sure that the server is configured to allow server-side includes. For security reasons, some sites don't allow them.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
By using server-side includes, it's not necessary to parse the
HTML file looking for a token. The file has already been opened
by the server, which is waiting for your script to supply the
text to insert in place of the <TT>#exec</TT> directive. The only
looping necessary is that which steps through the lists in memory
and constructs the lines of output. Because the resulting output
is being piped back to the Web server for processing, you can
freely use HTML tags to format the final list. Listing 12.3 takes
advantage of HTML formatting to format the guestbook in the table,
one guest per line. Each guest entry has two elements:
<OL>
<LI>The guest's name, formatted as a link to his or her corresponding
e-mail address.
<LI>The URL of the guest's home page, formatted as a link to his
or her corresponding home page.
</OL>
<HR>
<BLOCKQUOTE>
<B>Listing 12.3&nbsp;&nbsp;HTML Formatting from Perl<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
...
print &quot;Content-type: text/html\n\n&quot;;
...
print &quot;&lt;CENTER&gt;&lt;TABLE&gt;&quot;;

$numNames = @Names;
for ($i=0; $i&lt;=$numNames; $i++) {
   print &quot;&lt;TR&gt;&quot;;
   print &quot;&lt;TD&gt;&lt;A HREF=\&quot;mailto:$Emails[$i]\&quot;&gt;$Names[$i]&lt;/A&gt;&lt;/TD&gt;&quot;;
   print &quot;&lt;TD&gt;&lt;A HREF=\&quot;$URLs[$i]\&quot;&gt;$URLs[$i]&lt;/A&gt;&lt;/TD&gt;&quot;;
   print &quot;&lt;/TR&gt;&quot;;
}

print &quot;&lt;/TABLE&gt;&lt;/CENTER&gt;&quot;;
</PRE>
</BLOCKQUOTE>
<HR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>NOTE</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
Even though you're not creating an entire HTML document when using server-side includes, the first thing your script must print back to the server is always the <TT>Content-type:</TT> line. This informs the server how to treat what follows: in this case, 
HTML text.
</BLOCKQUOTE>
<BLOCKQUOTE>
Additionally, you should probably place the <TT>Content-type:</TT> line as soon as possible within your script. Some servers limit the time they wait for output from a script. If your script takes a long time, as when loading in a large guestbook database, 

the connection could time out before your script finishes. Quickly transmitting the <TT>Content-type:</TT> field back to the server ensures that the connection will be kept open until your script finishes.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="PleaseSignIn">
Please Sign In&#133;</A></H3>
<P>
After retrieving, formatting, and displaying the guestbook, the
only thing left is finding a way for visitors to add their information
to the database. Within the context of the Web, getting information
from the user is handled through HTML forms. Expanding on the
previous code listings in this chapter, listing 12.4 is an example
of a simple form.
<HR>
<BLOCKQUOTE>
<B>Listing 12.4&nbsp;&nbsp;signin.html-Entering a Visitor's Information
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
&lt;HTML&gt;
&lt;HEAD&gt;
   &lt;TITLE&gt;Please Sign In...&lt;/TITLE&gt;
&lt;/HEAD&gt;

&lt;BODY&gt;
&lt;CENTER&gt;&lt;H1&gt;Please Sign In.../H1&gt;&lt;/CENTER&gt;

&lt;HR&gt;

Please fill in the blanks below, then click 
&lt;B&gt;Sign In!&lt;/B&gt; to add your name to the guestbook.

&lt;FORM METHOD=POST ACTION=&quot;/cgi-bin/signin.pl&quot;&gt;
   Name: &lt;INPUT TYPE=TEXT NAME=REALNAME SIZE=30&gt;&lt;BR&gt;
   E-Mail: &lt;INPUT TYPE=TEXT NAME=EMAIL SIZE=40&gt;&lt;BR&gt;
   URL: &lt;INPUT TYPE=TEXT NAME=URL SIZE=50&gt;&lt;BR&gt;

   &lt;INPUT TYPE=SUBMIT VALUE=&quot;Sign In!&quot;&gt; * 
   &lt;INPUT TYPE=RESET VALUE=&quot;Clear Form&quot;&gt;
&lt;/FORM&gt;

&lt;HR&gt;

&lt;A HREF=&quot;/index.html&quot;&gt;Back to the Home Page&lt;/A&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
</BLOCKQUOTE>
<HR>
<P>
The form for the guestbook is the easy part. The script that takes
the information from the form and adds it to the database does
the most work.
<P>
Remember that when a form transmits back to the server, all fields
and their values pass to the CGI program through the <TT>CONTENT_LENGTH</TT>
environment variable. Individual fields are separated within this
string by ampersands (<TT>&amp;</TT>), as in:
<BLOCKQUOTE>
<PRE>
REALNAME=Scott+J.+Walter&amp;EMAIL=sjwalter@visi.com&amp;URL=...
</PRE>
</BLOCKQUOTE>
<P>
Note also that any embedded spaces within a field convert to plus
signs (<TT>+</TT>). To retrieve the data from &quot;CONTENT_LENGTH,&quot;
use a Perl fragment similar to that in listing 12.5.
<HR>
<BLOCKQUOTE>
<B>Listing 12.5&nbsp;&nbsp;Retrieving Form Data<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
...
read(STDIN, $buffer, $ENV{'CONTENT_LENGTH'});

# Split the name-value pairs
@pairs = split(/&amp;/, $buffer);

foreach $pair (@pairs) {
   ($name, $value) = split(/=/, $pair);

   # Un-Webify plus signs and %-encoding
   $value =~ tr/+/ /;
   $value =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack(&quot;C&quot;, hex($1))/eg;

   # strip HTML comment tags
   $value =~ s/&lt;!--(.|\n)*--&gt;//g;

   if ($allow_html != 1) {
      $value =~ s/&lt;([^&gt;]|\n)*&gt;//g;
   }

   $FORM{$name} = $value;
}
</PRE>
</BLOCKQUOTE>
<HR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>NOTE</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
The section of the <TT>foreach</TT> loop that &quot;un-Webifies&quot; the <TT>$value</TT> string is of special interest. When data transmits from a form back to the server, several character conversions occur. Embedded spaces convert to plus signs 
(<TT>+</TT>), and other special characters such as the tilde (<TT>~</TT>) translate to <I>%-codes</I>. This is a two-character hexadecimal representation of the character's ASCII value, prefaced by a percent sign. This permits data to traverse the Web and 

still maintain all the original information. Once received by the script, however, it's necessary to convert back to the original form.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>Script Hacking</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
In listing 12.5, there is a line within the <TT>foreach</TT> (this is a Perl command) loop that strips out HTML comments from the $value variable. This plugs a security hole when using Perl scripting and server-side includes.
</BLOCKQUOTE>
<BLOCKQUOTE>
Remember that, from within HTML, a server-side include activates by using a line some-thing like:</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>&lt;!--#exec ...--&gt;</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
Normally, the Web server ignores the content of comment tags. However, when the <TT>#exec</TT> directive is encountered, the comment is treated as a request to perform a server-side function, such as run a particular piece of Perl code. This creates a 
potential break in the security of a site, and permits a creative individual to embed an <TT>#exec</TT> directive within a form's field for processing by the server.
</BLOCKQUOTE>
<BLOCKQUOTE>
The <TT>signin.pl</TT> script writes the content of the form fields out to the guestbook file. This content is later read back into the system by <TT>guestbook.pl</TT> and passed <I>back</I> to the server as HTML code. At this point, it is formatted by the 

server, <I>including</I> processing any embedded directives. Embedded directives, such as another <TT>#exec</TT>., can do just about anything: Retrieve a password file, add a new password into the system, or delete an entire directory tree.
</BLOCKQUOTE>
<BLOCKQUOTE>
To prevent this kind of <I>hack</I> from occurring, regard the following line:
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>$value =~ s/&lt;!--(.|\n)*--&gt;//g;</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
This strips out all HTML comment tags from the input field before the field writes to the database</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Once the data has been retrieved from the environment, the final
step is to add the new information to the guestbook database.
This is done by appending the new information to the end of the
existing file:
<BLOCKQUOTE>
<PRE>
open (GUESTBOOK,&quot;&gt;&gt;guestbook.dat&quot;);
print GUESTBOOK &quot;$FORM{'REALNAME'}|$FORM{'EMAIL'}|$FORM{'URL'}\n&quot;;
close(GUESTBOOK);
</PRE>
</BLOCKQUOTE>
<P>
For a more advanced guestbook, load the entire database into memory,
then step through it to look for duplicate information. You can
either ignore the new entry or replace the old.
<H2><A NAME="AGraffitiWall"><FONT SIZE=5 COLOR=#FF0000>
A Graffiti Wall</FONT></A></H2>
<P>
You can extend the guestbook system to allow a visitor to scribble
a comment for the enjoyment of others on the Web. All that's needed
is to:
<OL>
<LI>Add a <TT>&lt;TEXTAREA&gt;</TT> field to the entry form to
accept a multiple-line comment.
<LI>Expand the <TT>signin.pl</TT> to write the additional field
out to the database.
<LI>Derive a <TT>graffiti.pl</TT> script that works just like
the guestbook script, with the exception that it also displays
the comment field.
</OL>
<P>
As an added feature, you could permit a visitor to embed HTML
statements within the comment field and allow them to design a
custom bit of graffiti complete with varying color, text style,
horizontal rules, and fonts. If you choose to do this, it's vital
that you preprocess the comment field to look for any potential
embedded commands, such as server-side include calls. Otherwise,
you're giving visitors more control over your site than you probably
want them to have.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>CAUTION</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
One final word of caution on graffiti walls-unless you preview every submission to the wall, you may end up with slogans or sayings displayed on your Web site that don't give the best impression of you. If you're a little leery of letting visitors to the 
Web site say whatever they feel about anything, you may want to screen each new submission to your wall. </BLOCKQUOTE>
<BLOCKQUOTE>
To screen any new graffiti, you can redirect submissions to your mailbox, or <I>a</I> mailbox on your system, instead of the graffiti page. From there, if the grafitti is acceptable, it can be added to the wall.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H2><A NAME="AJavaScriptGuestbook"><FONT SIZE=5 COLOR=#FF0000>
A JavaScript Guestbook?</FONT></A></H2>
<P>
On the Internet now and then, someone asks whether it's possible
to create a guestbook with JavaScript. The questioner is usually
looking for a way to implement a guestbook, but doesn't have CGI-level
access on his or her server.
<P>
Can it be done?
<P>
Remember that JavaScript can't read (open) other files on the
server, nor can it write out to files on the server. This means
that any guestbook database must be contained totally within the
loaded HTML document. It also means that any data entering through
a form cannot be saved by JavaScript for others to view.
<P>
You can use JavaScript for the following:
<BLOCKQUOTE>
Validate the data within the fields of the sign-in form and prevent
the CGI script from running if any necessary information is missing.
</BLOCKQUOTE>
<BLOCKQUOTE>
Check to be certain that the character your CGI script uses as
a field delimiter isn't found in any field.
</BLOCKQUOTE>
<BLOCKQUOTE>
Pre-scan input fields for HTML directives and possibly warn the
user that you don't permit it.
</BLOCKQUOTE>
<BLOCKQUOTE>
Customize the display of the guestbook data to utilize the best
features of the user's browser.
</BLOCKQUOTE>
<P>
You could also use a server-side include script that writes JavaScript
code back out to the HTML document stream. Writing out the code
to load a JavaScript array with the guestbook database is an example.
From there, JavaScript processes the database internally.
<P>
There is development on the Web to permit client-side languages
like JavaScript and VBScript to access other files on the server
in a secured way. One of these techniques is called <I>data tainting</I>.
Until the bulk of the Web community establishes and utilizes a
standard, JavaScript is best left to format existing information
for display rather than editing or updating it.
<H2><A NAME="FromHere"><FONT SIZE=5 COLOR=#FF0000>
From Here&#133;</FONT></A></H2>
<P>
This chapter took the tricks from chapter 8, &quot;Advertising
with Billboards,&quot; and applied them to the concept of a guestbook.
Displaying a database of visitors is, fundamentally, no different
from displaying a list of advertisers. If you're interested in
digging further into this and similar techniques, check out:
<UL>
<LI><A HREF="ch9.htm" >Chapter 9</A> &quot;Bulletin Boards,&quot; for another use of
the &quot;save from one, display to all&quot; method, such as
a Web-based bulletin board.
<LI><A HREF="ch13.htm" >Chapter 13</A>, &quot;Field Verification,&quot; for more information
on validating the information in form fields.
<LI><A HREF="ch15.htm" >Chapter 15</A>, &quot;Managing a Database,&quot; for more information
on creating and manipulating server-side databases.
<LI>Netscape's home site, <B><A HREF="http://home.netscape.com/">http://home.netscape.com/</A></B>, for
more information on data tainting.
</UL>
<HR>

<CENTER><P><A HREF="ch11.htm"><IMG SRC="pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="#CONTENTS"><IMG SRC="cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="index.htm"><IMG SRC="hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="ch13.htm"><IMG SRC="nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<HR WIDTH="100%"></P></CENTER>
</BODY>
</HTML>
