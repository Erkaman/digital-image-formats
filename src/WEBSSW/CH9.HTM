<HTML>
<HEAD>
<TITLE>Chapter 9 -- Bulletin Boards</TITLE>

<META NAME="GENERATOR" CONTENT="Internet Assistant for Microsoft Word 2.0z">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT SIZE=6 COLOR=#FF0000>Chapter&nbsp;9</FONT></H1>
<H1><FONT SIZE=6 COLOR=#FF0000>Bulletin Boards</FONT></H1>
<HR>
<P>
<CENTER><B><FONT SIZE=5><A NAME="CONTENTS">CONTENTS</A></FONT></B></CENTER>
<UL>
<LI><A HREF="#UnderstandingBulletinBoards">
Understanding Bulletin Boards</A>
<LI><A HREF="#PostingaMessage">
Posting a Message</A>
<LI><A HREF="#TheHTMLFrontEnd">
The HTML Front End</A>
<LI><A HREF="#FromHere">
From Here&#133;</A>
</UL>

<HR>
<P>
A part from e-mail-based mailing lists and IRC (<I>Internet Relay
Chat</I>), another method of &quot;group communication&quot; on
the Internet is <I>usenet</I>, a global collection of &quot;newsgroups&quot;
where discussion is carried on over subjects that vary from the
technical to the bizarre. No matter what interests you, you'll
probably find a newsgroup that covers it, perhaps even several
as in the case of many popular programming topics, like scripting.
<P>
On the other hand, if you're running a Web site with rather unique
subject matter, it might be interesting to give your visitors
a forum for discussion that's local to your site. That way, people
can stop by, poke around, and join in the discussion-all from
the comfort of your Web pages. Borrowing a term from another type
of computer intercommunication, a system such as this is called
a <I>bulletin board</I>.
<H2><A NAME="UnderstandingBulletinBoards"><FONT SIZE=5 COLOR=#FF0000>
Understanding Bulletin Boards</FONT></A></H2>
<P>
The principle behind a bulletin board is relatively simple:
<BLOCKQUOTE>
Users can peruse a list of posted messages, reading those that
interest them.<BR>
Users can post their own messages into the system.
</BLOCKQUOTE>
<P>
Both sides of the bulletin board revolve around the central message
database, where every posting is stored. The easiest way to deal
with individual messages is to handle them as separate files,
all stored in a common directory.
<P>
Because the directory will hold multiple files, being able to
provide a unique name for each file is also important. Taking
another cue from electronic BBS systems, where messages are identified
by number, each message file will be a number (say 8 digits long).
Successive messages produce successive numbers. This means another
file that keeps track of the &quot;last number used&quot; will
also be needed.
<H2><A NAME="PostingaMessage"><FONT SIZE=5 COLOR=#FF0000>
Posting a Message</FONT></A></H2>
<P>
Adding a new message to the database can be handled through an
HTML form, similar to the one shown in listing 9.1.
<HR>
<BLOCKQUOTE>
<B>Listing 9.1&nbsp;&nbsp;The Message Posting Form<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
&lt;FORM METHOD=POST ACTION=&quot;/cgi-bin/post.cgi&quot;&gt;
   Name: &lt;INPUT TYPE=TEXT NAME=&quot;realname&quot; SIZE=40&gt;&lt;BR&gt;
   Email: &lt;INPUT TYPE=TEXT NAME=&quot;email&quot; SIZE=40&gt;&lt;BR&gt;
   Subject: &lt;INPUT TYPE=TEXT NAME=&quot;subject&quot; SIZE=80&gt;

   &lt;P&gt;

   Type your message:&lt;BR&gt;
   &lt;TEXTAREA TYPE=TEXT NAME=&quot;message&quot; WRAP COLS=60 ROWS=15&gt;
   &lt;/TEXTAREA&gt;

   &lt;INPUT TYPE=SUBMIT NAME=&quot;submit&quot; VALUE=&quot; Post It!&quot;&gt;
   &lt;INPUT TYPE=RESET NAME=&quot;reset&quot;   VALUE=&quot;  Clear  &quot;&gt;
&lt;/FORM&gt;
</PRE>
</BLOCKQUOTE>
<HR>
<P>
Nothing really fancy is needed here-the work happens after the
user clicks the <TT>Post It!</TT> button. At that point, the <TT>post.cgi</TT>
script takes over and does the following: 
<OL>
<LI>Reads in the high message number from the counter file.
<LI>Increments the number and writes it back out for the next
message.
<LI>Copies the contents of the message field into a new file.
<LI>Rewrites the subject browse document, adding the new messages
subject those displayed.
</OL>
<P>
First things first, though-you need to retrieve the form data
from the environment variables you need (as shown in listing 9.2).
<HR>
<BLOCKQUOTE>
<B>Listing 9.2&nbsp;&nbsp;Reading Form Fields<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
read(STDIN, $buffer, $ENV{'CONTENT_LENGTH'});
@pairs = split(/&amp;/, $buffer);

foreach $pair (@pairs)
{
   ($name, $value) = split(/=/, $pair, 2);
   $value =~ tr/+/ /;
   $value =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack(&quot;C&quot;, hex($1))/eg;
   $contents{$name} = $value;
}
</PRE>
</BLOCKQUOTE>
<HR>
<P>
Once the message is available for processing, grab a new message
number from the counter file (listing 9.3).
<HR>
<BLOCKQUOTE>
<B>Listing 9.3&nbsp;&nbsp;Incrementing a Counter<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
# Get the current high message number
open(FILE,&quot;messagecounter&quot;);
$highMsg = &lt;FILE&gt;;
close(FILE);
$highMsg++;

# Write out the new number
open(FILE,&quot;&gt;messagecounter&quot;);
print FILE &quot;$highMsg&quot;;
close(FILE);
</PRE>
</BLOCKQUOTE>
<HR>
<P>
At this point, you have enough information to write the new message
into a file in the database. Listing 9.4 demonstrates writing
the message out as an HTML file for easy retrieval from the browser
and assumes that all messages are stored in a directory <TT>messagebase/</TT>
off of where the <TT>post.cgi</TT> script is located.
<HR>
<BLOCKQUOTE>
<B>Listing 9.4&nbsp;&nbsp;Writing a New Message<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
open(FILE,&quot;&gt;messages/$highNum.html&quot;);
print FILE &quot;&lt;HTML&gt;\n&quot;;
print FILE &quot;&lt;HEAD&gt;\n&quot;;
print FILE &quot;   &lt;TITLE&gt;$contents{'subject'}&lt;/TITLE&gt;\n&quot;;
print FILE &quot;&lt;/HEAD&gt;\n&quot;;
print FILE &quot;&lt;BODY&gt;\n&quot;;
print FILE &quot;&lt;H1&gt;$contents{'subject'}&lt;/H1&gt;\n&quot;;
print FILE &quot;&lt;HR&gt;\n&quot;;
print FILE &quot;Posted by &quot;;
print FILE &quot;&lt;A HREF=\&quot;mailto:$contents{'email'}\&quot;&gt;
$contents{'realname'}&lt;/A&gt;\n&quot;;
print FILE &quot;&lt;P&gt;\n&quot;;
print FILE &quot;$message\n&quot;;
print FILE &quot;&lt;/BODY&gt;&lt;/HTML&gt;\n&quot;;
close(FILE);
</PRE>
</BLOCKQUOTE>
<HR>
<H2><A NAME="TheHTMLFrontEnd"><FONT SIZE=5 COLOR=#FF0000>
The HTML Front End</FONT></A></H2>
<P>
With the message now part of the database, it's necessary to add
it to the HTML document that lists all available messages. Listing
9.5 shows the document that serves as a template for displaying
the current messages.
<HR>
<BLOCKQUOTE>
<B>Listing 9.5&nbsp;&nbsp;Listing of Current Messages<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
&lt;HTML&gt;
&lt;HEAD&gt;
   &lt;TITLE&gt;Current Messages&lt;/TITLE&gt;
&lt;/HEAD&gt;

&lt;BODY&gt;
&lt;CENTER&gt;&lt;H1&gt;Who's Sayin' What...&lt;/H1&gt;&lt;/CENTER&gt;

&lt;HR&gt;

&lt;!--START--&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
</BLOCKQUOTE>
<HR>
<P>
At first glance this template doesn't say much. When combined
with a CGI script, however, it becomes the subject list. The trick
here is to get the script to rewrite this file each time a new
message is posted. This is more efficient than using server-side
includes to generate the message list dynamically (&quot;on-the-fly&quot;)
each time the user pulls up the subject page.
<P>
In chapter 8, &quot;Advertising with Billboards,&quot; you are
introduced to the trick of embedding a specific HTML comment within
a document that works as a placeholder for the CGI script to find
and handle. The document in listing 9.5 uses the same trick. The
placeholder is <TT>&lt;!--START--&gt;</TT> but this time the script
is going to handle things a little differently. Because it makes
sense to make the most recently posted messages list first, the
placeholder is used to keep track of the top of the list and not
be deleted from the file. The code block in listing 9.6 demonstrates
this.
<HR>
<BLOCKQUOTE>
<B>Listing 9.6&nbsp;&nbsp;Rewriting the Subject List<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
# load the HTML document into memory
open(FILE,&quot;bbs.html&quot;);
@html = &lt;FILE&gt;;
close(FILE);

# prepare to write out the new document
open(FILE,&quot;&gt;bbs.html&quot;);

foreach $line (@html) {
   print FILE &quot;$line&quot;;

   if ($line =~ /&lt;!--START--&gt;/) {
      print FILE &quot;&lt;A HREF=\&quot;messages/$highNum.html\&quot;&gt;
             $content{'subject'}&lt;/A&gt; - $content{'realname'}&lt;BR&gt;\n&quot;;
   }
}

close(FILE);
</PRE>
</BLOCKQUOTE>
<HR>
<P>
As demonstrated, the placeholder line is kept in the document
with the new message link being added immediately after it. This
way, the latest messages are always listed first.
<H2><A NAME="FromHere"><FONT SIZE=5 COLOR=#FF0000>
From Here&#133;</FONT></A></H2>
<P>
This is a simple look at the process behind adding a bulletin
board to your Web site. If you're interested in exploring related
topics, check out:
<UL>
<LI><A HREF="ch15.htm" >Chapter 15</A>, &quot;Managing a Database,&quot; for other ideas
on database manipulation.
</UL>
<HR>

<CENTER><P><A HREF="ch8.htm"><IMG SRC="pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="#CONTENTS"><IMG SRC="cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="index.htm"><IMG SRC="hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="ch10.htm"><IMG SRC="nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<HR WIDTH="100%"></P></CENTER>
</BODY>
</HTML>
