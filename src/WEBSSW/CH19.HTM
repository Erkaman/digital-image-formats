<HTML>
<HEAD>
<TITLE>Chapter 19 -- Shopping Cart</TITLE>

<META NAME="GENERATOR" CONTENT="Internet Assistant for Microsoft Word 2.0z">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT SIZE=6 COLOR=#FF0000>Chapter&nbsp;19</FONT></H1>
<H1><FONT SIZE=6 COLOR=#FF0000>Shopping Cart</FONT></H1>
<HR>
<P>
<CENTER><B><FONT SIZE=5><A NAME="CONTENTS">CONTENTS</A></FONT></B></CENTER>
<UL>
<LI><A HREF="#OfftheShelf">
Off the Shelf</A>
<LI><A HREF="#ServerSideCart">
Server-Side Cart</A>
<LI><A HREF="#ClientSideCart">
Client-Side Cart</A>
<UL>
<LI><A HREF="#ObjectPersistenceinJavaScript">
Object Persistence in JavaScript</A>
<LI><A HREF="#UserDefinedObjects">
User-Defined Objects</A>
</UL>
<LI><A HREF="#FromHere">
From Here&#133;</A>
</UL>

<HR>
<P>
If you've got an online catalog and your visitors browse the &quot;shelves&quot;
of your store, it would be nice to give them a place to put the
products they're going to buy- a CyberShopping Cart.

<H2><A NAME="OfftheShelf"><FONT SIZE=5 COLOR=#FF0000>
Off the Shelf</FONT></A></H2>
<P>
The shopping cart is an extension of the online catalog, providing
a means to &quot;remember&quot; which products the user has selected
for purchase as they move from page to page. This implies that
the cart is an integral part of the catalog, and how you design
your catalog controls how you implement your cart.<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>TIP</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
One good example of a shopping cart in action is Netscape's General Store: <B><A HREF="http://merchant.netscape.com/netstore/index.html">http://merchant.netscape.com/netstore/index.html</A></B>. You can purchase copies of their browsers, servers, books, 
and even clothing.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Whether you use client- or server-side scripting to implement
the shopping cart, you will probably interface the cart to the
catalog through a form:
<BLOCKQUOTE>
<PRE>
&lt;FORM METHOD=POST ACTION=&quot;/cgi-bin/cart.cgi&quot;&gt;
   ...
   &lt;INPUT TYPE=SUBMIT VALUE=&quot;I'll take it&quot;&gt;
&lt;/FORM&gt;
</PRE>
</BLOCKQUOTE>
<P>
You can either intercept and process the shopping request from
within the browser (client-side scripting), or pass the data on
to the server for processing (server-side).
<H2><A NAME="ServerSideCart"><FONT SIZE=5 COLOR=#FF0000>
Server-Side Cart</FONT></A></H2>
<P>
To implement a shopping cart from the server, you'll need to create
a temporary database file that stores the user's selections. This
is easily done by having the <TT>cart.cgi</TT> script generate
the standard flat-file database sequence:
<OL>
<LI>Open a file, if it exists; otherwise, create one.
<LI>Read any data from the file into an internal list.
<LI>Add the new purchase to the list.
<LI>Write the whole thing back out again.
</OL>
<P>
The only trick is making sure that the file name you pick isn't
used by anyone else. A common technique for this is to keep a
separate <I>counter file</I> on the server that records the last
order number used. When the cart first loads, the counter file
is checked, incremented, and the new number is used as the new
cart file name. To make certain that this happens at the correct
time, create the cart file when the user first enters the catalog
as part of the <TT>catalog.cgi</TT> script.
<P>
Additionally, as each catalog page generates, it's necessary to
include information back to the browser identifying the name of
the cart file. This is done in one of two ways:
<OL>
<LI>As a parameter added to the ACTION attribute of the form cart.cgi
generates.
<LI>As a hidden field contained within the form.
</OL>
<P>
The hidden field is a bit less obtrusive, but either method works.
<P>
Additional information you may want to pass back to the browser
may include:
<BLOCKQUOTE>
The total number of items selected.<BR>
The total cost of all selected items.
</BLOCKQUOTE>
<P>
A side-effect of using server-side temporary files is the potential
for the user to &quot;wander off&quot; your site if they decide
not to continue shopping, or to be disconnected from their provider
due to a bad modem connection, or by simply hanging up the phone.
This results in a temporary file lying around on your system,
which can be handled in one of two ways:
<OL>
<LI>You must periodically do some system maintenance to clean
up any files left over.
<LI>Switch to storing the shopping cart on the client computer
within the user's browser, using cookies.
</OL>
<P>
Maintenance can be automated by adding some additional functions
to your server's periodic maintenance routines that run. Have
it scan the cart directory and delete any old files. Client-side
scripting of the cart eliminates this problem entirely, and is
discussed next.
<H2><A NAME="ClientSideCart"><FONT SIZE=5 COLOR=#FF0000>
Client-Side Cart</FONT></A></H2>
<P>
The client-side (browser) cart relies on the browser's ability
to dynamically create objects and add data to the local dataset
within the browser's dataspace.
<P>
In order for this to work, you need to play a couple games with
how pages are loaded in the browser. Because loading a new page
clears any existing JavaScript objects (functions, methods, and
so on) from memory, you need to create a fake shell document that
contains the actual data.
<H3><A NAME="ObjectPersistenceinJavaScript">
Object Persistence in JavaScript</A></H3>
<P>
Because loading a new page totally clears the browser of any JavaScript
(objects, functions, methods, and so on) that was associated with
that page, storing the cart data within the document that contains
the shopping form won't work. If your site is framed, however,
you can store the cart objects in a frame that doesn't get reloaded.
This keeps its persistence even though the catalog display pages
and order form are constantly being updated.
<P>
It may not be practical to dedicate a frame simply to hold data,
especially when you want to use as much of the browser as you
can for your products. Dedicating a frame has, however, been demonstrated
in rather unique ways on some sites.
<P>
The <I>parent</I> frame is the document that contains the <TT>&lt;FRAMESET&gt;</TT>
directives that structure your site. If you store your code in
this frame, you can access the objects as often as you want until
the user leaves your site. A template for a parent frame document
that stores any objects you want is shown in listing 19.1.<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>TIP</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
For an example of centralizing JavaScript code and data within a parent frame that the child frames then use, check out the home site for <I>The Complete Idiot's Guide to JavaScript</I>, published by Que at: <B><A 
HREF="http://www.visi.com/~sjwalter/javascript/">http://www.visi.com/~sjwalter/javascript/</A></B>.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 19.1&nbsp;&nbsp;Storing Data in the <I>Parent</I> Frame
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;
&lt;!-- begin hide
...
your code can go here
...
// end hide --&gt;
&lt;/SCRIPT&gt;

&lt;FRAMESET ...&gt;
   ...
&lt;/FRAMESET&gt;
</PRE>
</BLOCKQUOTE>
<HR>
<P>
With this used as the parent document, any pages loaded within
child frames reaches back and accesses any functions or objects
by simply prefacing any references to the desired JavaScript component
with <TT>parent.</TT>, as follows:
<BLOCKQUOTE>
<PRE>
parent.objectOrFunction
</PRE>
</BLOCKQUOTE>
<P>
This is, of course, assuming that the document making the call
is a <I>direct child</I> of the parent. A direct child is loaded
within the frames defined by the <TT>&lt;FRAME&gt;</TT> tags in
the parent. If any of the children are themselves framesets with
their own children, you have to preface the object call with another
<TT>parent.</TT>:
<BLOCKQUOTE>
<PRE>
parent.parent.objectOrFunction
</PRE>
</BLOCKQUOTE>
<P>
This process continues for every level deeper you get into the
frame structure-although at some point, it becomes impractical
to nest frames too deeply. If you're not certain how deep you're
getting in your frames, you can always access your objects from
the top instead of the bottom. The JavaScript <I>top</I> <I>property</I>
is a synonym for the topmost window within the browser. Because
your parent document is loaded first, it is the topmost window,
meaning that you can access objects within it by:
<BLOCKQUOTE>
<PRE>
top.objectOrFunction
</PRE>
</BLOCKQUOTE>
<P>
which will work properly no matter what child (or child of a child)
window you're in within the site.<BR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>CAUTION</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
Unfortunately, it's not necessarily safe to assume that your parent document will always be the top-most document. If your site is popular, other sites may include links to yours, and <I>if</I> one of those sites itself uses frames and the Web master 
forgets to include a <TT>TARGET=&quot;_top&quot;</TT> attribute in the link to your site, your shopping cart may open up within one of <I>his</I> child windows-in which case, any references to <TT>top</TT> will reach into <I>his</I> pages.
</BLOCKQUOTE>
<BLOCKQUOTE>
Possible workarounds for this problem are:</BLOCKQUOTE>
<UL>
<LI>Set up your shopping section as a link from another higher (home) page and be sure to include the TARGET attribute.
<LI>Have your catalog open a whole new browser window.
<LI>E-mail every Web master with a link to your site and ask them to fix their pages.
</UL>
<BLOCKQUOTE>
Naturally, the first of these three is probably the best. While it may not cure all possible problems, it should solve most of them.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Now that this fake frame is created, all of your JavaScript methods
can be placed in <TT>index.htm</TT> and referenced from any document
within the frame tree using the special JavaScript reserved word
<TT>top</TT>. This will access the topmost window (or frame) of
a tree.
<P>
There is one last point to consider when using this technique.
If you are planning to store any functions within your parent
frame, and those functions do manipulation on the window of the
current (child) page, you'll need to pass an additional parameter
to the functions-the <TT>window</TT> on which you will be working.
Without this, JavaScript can't correctly resolve properties of
the specific <TT>window</TT> object. From within the parent document,
any reference to <TT>this</TT> has an entirely different meaning.
Also, the minute you start to reach from one frame into the next,
<TT>self</TT> is no longer guaranteed to work correctly, and you
need to pass <TT>window</TT> to force the correct resolution.
<H3><A NAME="UserDefinedObjects">
User-Defined Objects</A></H3>
<P>
Once you know where you're going to store your objects, you need
to create them. This requires creating a <I>user-defined</I> object.
<P>
To create your own objects, you first need to write a function
whose name is the same as that of the object you wish to define
(like <TT>Item</TT>). You then initialize the properties of the
object, such as its name and price. Listing 19.2 is an example
of the object-creation function.
<HR>
<BLOCKQUOTE>
<B>Listing 19.2&nbsp;&nbsp;Defining a Cart Object<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
function Item(strDescription, strCost) {
   this.Name = strDescription;
   this.Cost = strCost;
   return this;
}
</PRE>
</BLOCKQUOTE>
<HR>
<P>
With your object type defined, you simply create an array (the
&quot;cart&quot;) that stores another item each time the user
clicks a button. This is demonstrated in listing 19.3.
<HR>
<BLOCKQUOTE>
<B>Listing 19.3&nbsp;&nbsp;The Cart<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
&lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;
&lt;!-- begin hide
...
cart = MakeArray();
numItems = 0;
totalCost = 0;

function PickOneUp() {
   cart[++numItems] = new Item(theForm.Name.value, 
                               theForm.Cost.value);

   totalCost += parseFloat(theForm.Cost.value);
}
// end script --&gt;
&lt;/SCRIPT&gt;
...
&lt;FORM METHOD=POST ACTION=&quot;/cgi-bin/purchase.cgi&quot;&gt;
   ...
   &lt;INPUT TYPE=BUTTON VALUE=&quot;Pick one Up&quot; ONCLICK=&quot;PickOneUp()&quot;&gt;
&lt;/FORM&gt;
</PRE>
</BLOCKQUOTE>
<HR>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>CAUTION</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
When indexing into a complex array-one that holds objects, not just simple properties or strings-it's critical that your indexes start with 1 instead of 0. While some built-in JavaScript arrays start their indexing at 0, this won't work for user-defined 
objects-it tends to scramble the data and makes it difficult to manipulate later.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
This simple loop structure keeps the total count of objects in
<TT>numItems</TT>, and the total cost of the cart in <TT>totalCost</TT>.
Note that when adding to the value stored in <TT>totalCost</TT>,
it's a good idea to use the <TT>parseFloat()</TT> method to ensure
that the value retrieved from the <TT>Cost</TT> field of the form
is treated as a number. JavaScript tends to be fond of strings
and assuming that it will treat a number as a number is not a
good idea.
<H2><A NAME="FromHere"><FONT SIZE=5 COLOR=#FF0000>
From Here&#133;</FONT></A></H2>
<P>
<A HREF="ch17.htm" >Chapter 17</A>, &quot;Creating Online Catalogs,&quot; introduces a
method for displaying your wares on the Web. This chapter discusses
extending the catalog system by allowing your shoppers to store
items in a cart as they peruse your shelves. For more information
on the various tricks and techniques used here, check out:
<UL>
<LI><A HREF="ch15.htm" >Chapter 15</A>, &quot;Managing a Database,&quot; shows you how
to create and maintain a database.
<LI><A HREF="ch20.htm" >Chapter 20</A>, &quot;Online Ordering,&quot; teaches you all about
online ordering and how to secure your transactions.
</UL>
<HR>

<CENTER><P><A HREF="ch18.htm"><IMG SRC="pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="#CONTENTS"><IMG SRC="cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="index.htm"><IMG SRC="hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="ch20.htm"><IMG SRC="nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<HR WIDTH="100%"></P></CENTER>
</BODY>
</HTML>
